{"hash":"2bb4e112aca11805538842bd993470f18f337797ec3f2f6ab02c47385caf088e","number":0,"hlc_timestamp":"0000-00-00T00:00:00.000000000Z_0","previous":"0000000000000000000000000000000000000000000000000000000000000000","genesis":[{"key":"__latest_block.hash","value":"2bb4e112aca11805538842bd993470f18f337797ec3f2f6ab02c47385caf088e"},{"key":"__latest_block.height","value":0},{"key":"currency.__code__","value":"__balances = Hash(default_value=0, contract='currency', name='balances')\n\n\ndef ____(vk: str):\n    __balances[vk] = 288090567\n\n\n@__export('currency')\ndef transfer(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    assert __balances[sender] >= amount, 'Not enough coins to send!'\n    __balances[sender] -= amount\n    __balances[to] += amount\n\n\n@__export('currency')\ndef balance_of(account: str):\n    return __balances[account]\n\n\n@__export('currency')\ndef allowance(owner: str, spender: str):\n    return __balances[owner, spender]\n\n\n@__export('currency')\ndef approve(amount: float, to: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    __balances[sender, to] += amount\n    return __balances[sender, to]\n\n\n@__export('currency')\ndef transfer_from(amount: float, to: str, main_account: str):\n    assert amount > 0, 'Cannot send negative balances!'\n    sender = ctx.caller\n    assert __balances[main_account, sender\n        ] >= amount, 'Not enough coins approved to send! You have {} and are trying to spend {}'.format(\n        __balances[main_account, sender], amount)\n    assert __balances[main_account] >= amount, 'Not enough coins to send!'\n    __balances[main_account, sender] -= amount\n    __balances[main_account] -= amount\n    __balances[to] += amount\n"},{"key":"currency.__compiled__","value":{"__bytes__":"e300000000000000000000000005000000400000007398000000650064006401640264038d035a01650264049c016405640684045a036504640183016505650264079c0264086409840483015a066504640183016502640a9c01640b640c840483015a0765046401830165026502640d9c02640e640f840483015a086504640183016505650264079c0264106411840483015a0965046401830165056502650264129c0364136414840483015a0a641553002916e900000000da0863757272656e6379da0862616c616e6365732903da0d64656661756c745f76616c7565da08636f6e7472616374da046e616d652901da02766b630100000000000000010000000300000043000000730c000000640174007c003c006400530029024e69c7e92b112901da0a5f5f62616c616e63657329017207000000a9007209000000da00da045f5f5f5f0400000073020000000001720b0000002902da06616d6f756e74da02746f630200000000000000030000000400000043000000734e0000007c0064016b047310740064028301820174016a027d0274037c0219007c006b05732a740064038301820174037c02050019007c00380003003c0074037c01050019007c00370003003c006400530029044e72010000007a1e43616e6e6f742073656e64206e656761746976652062616c616e636573217a194e6f7420656e6f75676820636f696e7320746f2073656e64212904da0e417373657274696f6e4572726f72da03637478da0663616c6c657272080000002903720c000000720d000000da0673656e64657272090000007209000000720a000000da087472616e7366657208000000730a0000000002100106011401100172120000002901da076163636f756e74630100000000000000010000000200000043000000730800000074007c001900530029014e290172080000002901721300000072090000007209000000720a000000da0a62616c616e63655f6f66110000007302000000000272140000002902da056f776e6572da077370656e646572630200000000000000020000000300000043000000730c00000074007c007c0166021900530029014e2901720800000029027215000000721600000072090000007209000000720a000000da09616c6c6f77616e63651600000073020000000002721700000063020000000000000003000000040000004300000073360000007c0064016b047310740064028301820174016a027d0274037c027c016602050019007c00370003003c0074037c027c0166021900530029034e72010000007a1e43616e6e6f742073656e64206e656761746976652062616c616e636573212904720e000000720f000000721000000072080000002903720c000000720d000000721100000072090000007209000000720a000000da07617070726f76651b0000007308000000000210010601140172180000002903720c000000720d000000da0c6d61696e5f6163636f756e74630300000000000000040000000500000043000000738a0000007c0064016b047310740064028301820174016a027d0374037c027c03660219007c006b05733e740064036a0474037c027c03660219007c0083028301820174037c0219007c006b057352740064048301820174037c027c036602050019007c00380003003c0074037c02050019007c00380003003c0074037c01050019007c00370003003c006400530029054e72010000007a1e43616e6e6f742073656e64206e656761746976652062616c616e636573217a494e6f7420656e6f75676820636f696e7320617070726f76656420746f2073656e642120596f752068617665207b7d20616e642061726520747279696e6720746f207370656e64207b7d7a194e6f7420656e6f75676820636f696e7320746f2073656e64212905720e000000720f00000072100000007208000000da06666f726d61742904720c000000720d0000007219000000721100000072090000007209000000720a000000da0d7472616e736665725f66726f6d2300000073120000000002100106010a010c011201140114011001721b0000004e290bda04486173687208000000da03737472720b000000da085f5f6578706f7274da05666c6f61747212000000721400000072170000007218000000721b000000720900000072090000007209000000720a000000da083c6d6f64756c653e0100000073160000000e030e04060112080601100406011204060112070601"}},{"key":"currency.__developer__","value":"sys"},{"key":"currency.__submitted__","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"currency.balances:0000803efd5df09c75c0c6670742db5074e5a011b829dfd8a0c50726d263a345","value":288090567},{"key":"delegates.S:current_motion","value":0},{"key":"delegates.S:members","value":["3cc7090dab1cc57df4d75be68d9f9cdbdbff639095488b68b0f90014f5cd20bc"]},{"key":"delegates.S:motion_opened","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"delegates.S:nays","value":0},{"key":"delegates.S:yays","value":0},{"key":"delegates.__code__","value":"INTRODUCE_MOTION = 'introduce_motion'\nVOTE_ON_MOTION = 'vote_on_motion'\nNO_MOTION = 0\nREMOVE_MEMBER = 1\nADD_SEAT = 2\nREMOVE_SEAT = 3\nVOTING_PERIOD = datetime.DAYS * 1\n__S = Hash(contract='delegates', name='S')\n__minimum_nodes = Variable(contract='delegates', name='minimum_nodes')\n__candidate_contract = Variable(contract='delegates', name='candidate_contract'\n    )\n\n\ndef ____(initial_members: list, minimum: int=1, candidate: str='elect_members'\n    ):\n    __S['members'] = initial_members\n    __minimum_nodes.set(minimum)\n    __candidate_contract.set(candidate)\n    __S['yays'] = 0\n    __S['nays'] = 0\n    __S['current_motion'] = NO_MOTION\n    __S['motion_opened'] = now\n\n\n@__export('delegates')\ndef quorum_max():\n    return int(len(__S['members']) * 2 / 3) + 1\n\n\n@__export('delegates')\ndef quorum_min():\n    return min(quorum_max(), __minimum_nodes.get())\n\n\n@__export('delegates')\ndef current_value():\n    return __S['members']\n\n\n@__export('delegates')\ndef vote(vk: str, obj: list):\n    assert type(obj) == list, 'Pass a list!'\n    arg = None\n    if len(obj) == 3:\n        action, position, arg = obj\n    else:\n        action, position = obj\n    __assert_vote_is_valid(vk, action, position, arg)\n    if action == INTRODUCE_MOTION:\n        __introduce_motion(position, arg)\n    else:\n        assert __S['current_motion'] != NO_MOTION, 'No motion proposed.'\n        assert __S['positions', vk] is None, 'VK already voted.'\n        if position is True:\n            __S['yays'] += 1\n            __S['positions', vk] = position\n        else:\n            __S['nays'] += 1\n            __S['positions', vk] = position\n        if __S['yays'] >= len(__S['members']) // 2 + 1:\n            __pass_current_motion()\n            __reset()\n        elif __S['nays'] >= len(__S['members']) // 2 + 1:\n            __reset()\n        elif now - __S['motion_opened'] >= VOTING_PERIOD:\n            __reset()\n\n\ndef __assert_vote_is_valid(vk: str, action: str, position: bool, arg: Any=None\n    ):\n    assert vk in __S['members'], 'Not a member.'\n    assert action in [INTRODUCE_MOTION, VOTE_ON_MOTION], 'Invalid action.'\n    if action == INTRODUCE_MOTION:\n        assert __S['current_motion'] == NO_MOTION, 'Already in motion.'\n        assert 0 < position <= REMOVE_SEAT, 'Invalid motion.'\n        if position == REMOVE_MEMBER:\n            __assert_vk_is_valid(arg)\n    elif action == VOTE_ON_MOTION:\n        assert type(position) == bool, 'Invalid position'\n\n\ndef __assert_vk_is_valid(vk: str):\n    assert vk is not None, 'No VK provided.'\n    assert type(vk) == str, 'VK not a string.'\n    assert len(vk) == 64, 'VK is not 64 characters.'\n    int(vk, 16)\n\n\ndef __introduce_motion(position: int, arg: Any):\n    assert position <= REMOVE_SEAT, 'Invalid position.'\n    if position == REMOVE_MEMBER:\n        assert arg in __S['members'], 'Member does not exist.'\n        assert len(__S['members']) > __minimum_nodes.get(\n            ), 'Cannot drop below current quorum.'\n        __S['member_in_question'] = arg\n    __S['current_motion'] = position\n    __S['motion_opened'] = now\n\n\ndef __pass_current_motion():\n    current_motion = __S['current_motion']\n    members = __S['members']\n    if current_motion == REMOVE_MEMBER:\n        members.remove(__S['member_in_question'])\n    elif current_motion == ADD_SEAT:\n        member_candidates = importlib.import_module(__candidate_contract.get())\n        new_mem = member_candidates.top_member()\n        if new_mem is not None:\n            members.append(new_mem)\n            member_candidates.pop_top()\n    elif current_motion == REMOVE_SEAT:\n        member_candidates = importlib.import_module(__candidate_contract.get())\n        old_mem = member_candidates.last_member()\n        if old_mem is not None:\n            members.remove(old_mem)\n            member_candidates.pop_last()\n    __S['members'] = members\n\n\ndef __reset():\n    __S['current_motion'] = NO_MOTION\n    __S['member_in_question'] = None\n    __S['yays'] = 0\n    __S['nays'] = 0\n    __S.clear('positions')\n"},{"key":"delegates.__compiled__","value":{"__bytes__":"e3000000000000000000000000060000004000000073ea00000064005a0064015a0164025a0264035a0364045a0464055a0565066a07640314005a0865096406640764088d025a0a650b6406640964088d025a0c650b6406640a64088d025a0d6426650e650f6510640c9c03640d640e84055a11651264068301640f6410840083015a1365126406830164116412840083015a1465126406830164136414840083015a156512640683016510650e64159c0264166417840483015a166427651065106517651864199c04641a641b84055a196510641c9c01641d641e84045a1a650f6518641f9c026420642184045a1b6422642384005a1c6424642584005a1d641853002928da10696e74726f647563655f6d6f74696f6eda0e766f74655f6f6e5f6d6f74696f6ee900000000e901000000e902000000e903000000da0964656c656761746573da01532902da08636f6e7472616374da046e616d65da0d6d696e696d756d5f6e6f646573da1263616e6469646174655f636f6e7472616374da0d656c6563745f6d656d626572732903da0f696e697469616c5f6d656d62657273da076d696e696d756dda0963616e64696461746563030000000000000003000000030000004300000073400000007c00740064013c0074016a027c018301010074036a027c02830101006402740064033c006402740064043c007404740064053c007405740064063c006400530029074eda076d656d626572737203000000da0479617973da046e617973da0e63757272656e745f6d6f74696f6eda0d6d6f74696f6e5f6f70656e65642906da035f5f53da0f5f5f6d696e696d756d5f6e6f646573da03736574da145f5f63616e6469646174655f636f6e7472616374da094e4f5f4d4f54494f4eda036e6f772903720e000000720f0000007210000000a900721c000000da00da045f5f5f5f0e000000730e000000000208010a010a01080108010801721e000000630000000000000000000000000400000043000000731c0000007400740174026401190083016402140064031b00830164041700530029054e72110000007205000000720600000072040000002903da03696e74da036c656e7216000000721c000000721c000000721c000000721d000000da0a71756f72756d5f6d617819000000730200000000027221000000630000000000000000000000000300000043000000731000000074007401830074026a0383008302530029014e2904da036d696e72210000007217000000da03676574721c000000721c000000721c000000721d000000da0a71756f72756d5f6d696e1e0000007302000000000272240000006300000000000000000000000002000000430000007308000000740064011900530029024e721100000029017216000000721c000000721c000000721c000000721d000000da0d63757272656e745f76616c7565230000007302000000000272250000002902da02766bda036f626a630200000000000000050000000500000043000000733401000074007c01830174016b027314740264018301820164007d0274037c01830164026b0272307c015c037d037d047d026e087c015c027d037d0474047c007c037c047c02830401007c0374056b02725a74067c047c02830201006ed674076403190074086b03736e7402640483018201740764057c006602190064006b08738674026406830182017c0464076b0872ac74076408050019006409370003003c007c04740764057c0066023c006e1c7407640a050019006409370003003c007c04740764057c0066023c0074076408190074037407640b19008301640c1a00640917006b0572f2740983000100740a830001006e3e7407640a190074037407640b19008301640c1a00640917006b0590017218740a830001006e18740b7407640d19001800740c6b0590017230740a8300010064005300290e4e7a0c506173732061206c69737421720600000072140000007a134e6f206d6f74696f6e2070726f706f7365642eda09706f736974696f6e737a11564b20616c726561647920766f7465642e54721200000072040000007213000000721100000072050000007215000000290dda0474797065da046c697374da0e417373657274696f6e4572726f727220000000da165f5f6173736572745f766f74655f69735f76616c6964da10494e54524f445543455f4d4f54494f4eda125f5f696e74726f647563655f6d6f74696f6e7216000000721a000000da155f5f706173735f63757272656e745f6d6f74696f6eda075f5f7265736574721b000000da0d564f54494e475f504552494f44290572260000007227000000da03617267da06616374696f6eda08706f736974696f6e721c000000721c000000721d000000da04766f746528000000732c0000000002140104010c010c0208010e0108010c0214011801080110010e0210010c011c01060108011e010801120172350000004e2904722600000072330000007234000000723200000063040000000000000004000000030000004300000073960000007c007400640119006b06731474016402830182017c017402740367026b06732874016403830182017c0174026b02727674006404190074046b027344740164058301820164067c02040003006b006f5674056b016e0402000100736474016407830182017c0274066b02729274077c03830101006e1c7c0174036b02729274087c02830174096b02739274016408830182016400530029094e72110000007a0d4e6f742061206d656d6265722e7a0f496e76616c696420616374696f6e2e72140000007a12416c726561647920696e206d6f74696f6e2e72030000007a0f496e76616c6964206d6f74696f6e2e7a10496e76616c696420706f736974696f6e290a7216000000722b000000722d000000da0e564f54455f4f4e5f4d4f54494f4e721a000000da0b52454d4f56455f53454154da0d52454d4f56455f4d454d424552da145f5f6173736572745f766b5f69735f76616c69647229000000da04626f6f6c29047226000000723300000072340000007232000000721c000000721c000000721d000000722c00000045000000731200000000021401140108011401200108010a010801722c0000002901722600000063010000000000000001000000030000004300000073460000007c0064006b097310740064018301820174017c00830174026b027324740064028301820174037c00830164036b027338740064048301820174047c006405830201006400530029064e7a0f4e6f20564b2070726f76696465642e7a10564b206e6f74206120737472696e672ee9400000007a18564b206973206e6f7420363420636861726163746572732ee9100000002905722b0000007229000000da037374727220000000721f00000029017226000000721c000000721c000000721d00000072390000005200000073080000000001100114011401723900000029027234000000723200000063020000000000000002000000030000004300000073640000007c0074006b01731074016401830182017c0074026b0272507c017403640219006b06732c74016403830182017404740364021900830174056a0683006b04734874016404830182017c01740364053c007c00740364063c007407740364073c006400530029084e7a11496e76616c696420706f736974696f6e2e72110000007a164d656d62657220646f6573206e6f742065786973742e7a2143616e6e6f742064726f702062656c6f772063757272656e742071756f72756d2eda126d656d6265725f696e5f7175657374696f6e7214000000721500000029087237000000722b00000072380000007216000000722000000072170000007223000000721b000000290272340000007232000000721c000000721c000000721d000000722e00000059000000731000000000011001080114011601060108010801722e00000063000000000000000005000000030000004300000073a60000007400640119007d007400640219007d017c0074016b0272287c016a02740064031900830101006e727c0074036b02726274046a0574066a07830083017d027c026a0883007d037c0364006b09729a7c016a097c03830101007c026a0a830001006e387c00740b6b02729a74046a0574066a07830083017d027c026a0c83007d047c0464006b09729a7c016a027c04830101007c026a0d830001007c01740064023c006400530029044e72140000007211000000723e000000290e72160000007238000000da0672656d6f7665da084144445f53454154da09696d706f72746c6962da0d696d706f72745f6d6f64756c6572190000007223000000da0a746f705f6d656d626572da06617070656e64da07706f705f746f707237000000da0b6c6173745f6d656d626572da08706f705f6c617374290572140000007211000000da116d656d6265725f63616e64696461746573da076e65775f6d656dda076f6c645f6d656d721c000000721c000000721d000000722f0000006400000073220000000001080108010801100108010e01080108010a010a0108010e01080108010a010801722f000000630000000000000000000000000300000043000000732e0000007400740164013c006400740164023c006403740164043c006403740164053c0074016a026406830101006400530029074e7214000000723e00000072030000007212000000721300000072280000002903721a0000007216000000da05636c656172721c000000721c000000721c000000721d000000723000000078000000730a00000000010801080108010801723000000029027204000000720d00000029014e291e722d0000007236000000721a000000723800000072400000007237000000da086461746574696d65da04444159537231000000da04486173687216000000da085661726961626c6572170000007219000000722a000000721f000000723d000000721e000000da085f5f6578706f72747221000000722400000072250000007235000000723a000000da03416e79722c0000007239000000722e000000722f0000007230000000721c000000721c000000721c000000721d000000da083c6d6f64756c653e0100000073280000000401040104010401040104010a010c010c010c04140b1005100510050601121c160d0e07100b0814"}},{"key":"delegates.__developer__","value":"sys"},{"key":"delegates.__owner__","value":"election_house"},{"key":"delegates.__submitted__","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"delegates.candidate_contract","value":"elect_delegates"},{"key":"delegates.minimum_nodes","value":1},{"key":"elect_delegates.__code__","value":"import currency\nimport election_house\n__candidate_state = Hash(contract='elect_delegates', name='candidate_state')\n__top_candidate = Variable(contract='elect_delegates', name='top_candidate')\n__no_confidence_state = Hash(contract='elect_delegates', name=\n    'no_confidence_state')\n__last_candidate = Variable(contract='elect_delegates', name='last_candidate')\n__to_be_relinquished = Variable(contract='elect_delegates', name=\n    'to_be_relinquished')\nSTAMP_COST = 20\n__member_cost = Variable(contract='elect_delegates', name='member_cost')\n__controller = Variable(contract='elect_delegates', name='controller')\n\n\ndef ____(policy: str='members', cost: int=100000):\n    __controller.set(policy)\n    __member_cost.set(cost)\n\n\n@__export('elect_delegates')\ndef register():\n    assert not __candidate_state['registered', ctx.caller\n        ], 'Already registered.'\n    currency.transfer_from(__member_cost.get(), ctx.this, ctx.caller)\n    __candidate_state['registered', ctx.caller] = True\n    __candidate_state['votes', ctx.caller] = 0\n    if __top_candidate.get() is None:\n        __top_candidate.set(ctx.caller)\n\n\n@__export('elect_delegates')\ndef unregister():\n    mns = election_house.current_value_for_policy(__controller.get())\n    assert __candidate_state['registered', ctx.caller], 'Not registered.'\n    assert ctx.caller not in mns, \"Can't unstake if in governance.\"\n    currency.transfer(__member_cost.get(), ctx.caller)\n    __candidate_state['registered', ctx.caller] = False\n    __candidate_state['votes', ctx.caller] = 0\n\n\n@__export('elect_delegates')\ndef vote_candidate(address: str):\n    assert __candidate_state['registered', address\n        ], 'Candidate not registered.'\n    v = __candidate_state['last_voted', ctx.caller]\n    assert v is None or now - v > datetime.DAYS * 1, 'Voting again too soon.'\n    vote_cost = STAMP_COST / election_house.current_value_for_policy(\n        'stamp_cost')\n    currency.transfer_from(vote_cost, 'blackhole', ctx.caller)\n    __candidate_state['last_voted', ctx.caller] = now\n    votes = __candidate_state['votes', address]\n    if votes is None:\n        __candidate_state['votes', address] = 1\n    else:\n        __candidate_state['votes', address] += 1\n    if __top_candidate.get() is not None:\n        if __candidate_state['votes', address] > __candidate_state['votes',\n            __top_candidate.get()]:\n            __top_candidate.set(address)\n\n\n@__export('elect_delegates')\ndef top_member():\n    return __top_candidate.get()\n\n\n@__export('elect_delegates')\ndef pop_top():\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    top = top_member()\n    if top is None:\n        return None\n    __candidate_state.clear('votes')\n    __top_candidate.set(None)\n\n\n@__export('elect_delegates')\ndef vote_no_confidence(address: str):\n    assert address in election_house.current_value_for_policy(__controller.\n        get()), 'Cannot vote against a non-committee member'\n    v = __no_confidence_state['last_voted', ctx.caller]\n    assert v is None or now - v > datetime.DAYS * 1, 'Voting again too soon.'\n    vote_cost = STAMP_COST / election_house.current_value_for_policy(\n        'stamp_cost')\n    currency.transfer_from(vote_cost, 'blackhole', ctx.caller)\n    __no_confidence_state['last_voted', ctx.caller] = now\n    if __no_confidence_state['votes', address] is None:\n        __no_confidence_state['votes', address] = 1\n    else:\n        __no_confidence_state['votes', address] += 1\n    if __last_candidate.get() is None:\n        __last_candidate.set(address)\n    elif __no_confidence_state['votes', address] > __no_confidence_state[\n        'votes', __last_candidate.get()]:\n        __last_candidate.set(address)\n\n\n@__export('elect_delegates')\ndef last_member():\n    r = __to_be_relinquished.get()\n    if r is not None:\n        return r\n    return __last_candidate.get()\n\n\n@__export('elect_delegates')\ndef pop_last():\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    r = __to_be_relinquished.get()\n    if r is not None:\n        __no_confidence_state['votes', r] = 0\n        __to_be_relinquished.set(None)\n    else:\n        __no_confidence_state.clear('votes')\n        __candidate_state['registered', __last_candidate.get()] = False\n        __last_candidate.set(None)\n\n\n@__export('elect_delegates')\ndef force_removal(address: str):\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    __candidate_state['registered', address] = False\n\n\n@__export('elect_delegates')\ndef relinquish():\n    assert ctx.caller in election_house.current_value_for_policy(__controller\n        .get())\n    r = __to_be_relinquished.get()\n    assert r is None, 'Someone is already trying to relinquish!'\n    __to_be_relinquished.set(ctx.caller)\n"},{"key":"elect_delegates.__compiled__","value":{"__bytes__":"e300000000000000000000000004000000400000007330010000640064016c005a00640064016c015a0165026402640364048d025a0365046402640564048d025a0565026402640664048d025a0665046402640764048d025a0765046402640864048d025a0864095a0965046402640a64048d025a0a65046402640b64048d025a0b6426650c650d640e9c02640f641084055a0e650f6402830164116412840083015a10650f6402830164136414840083015a11650f64028301650c64159c0164166417840483015a12650f6402830164186419840083015a13650f64028301641a641b840083015a14650f64028301650c64159c01641c641d840483015a15650f64028301641e641f840083015a16650f6402830164206421840083015a17650f64028301650c64159c0164226423840483015a18650f6402830164246425840083015a19640153002927e9000000004eda0f656c6563745f64656c656761746573da0f63616e6469646174655f73746174652902da08636f6e7472616374da046e616d65da0d746f705f63616e646964617465da136e6f5f636f6e666964656e63655f7374617465da0e6c6173745f63616e646964617465da12746f5f62655f72656c696e71756973686564e914000000da0b6d656d6265725f636f7374da0a636f6e74726f6c6c6572da076d656d62657273e9a08601002902da06706f6c696379da04636f7374630200000000000000020000000200000043000000731800000074006a017c008301010074026a017c01830101006400530029014e2903da0c5f5f636f6e74726f6c6c6572da03736574da0d5f5f6d656d6265725f636f73742902720f0000007210000000a9007214000000da00da045f5f5f5f0f000000730400000000010a01721600000063000000000000000000000000040000004300000073660000007400640174016a02660219000c007318740364028301820174046a0574066a07830074016a0874016a028303010064037400640174016a0266023c0064047400640574016a0266023c0074096a07830064006b08726274096a0a74016a02830101006400530029064eda0a726567697374657265647a13416c726561647920726567697374657265642e547201000000da05766f746573290bda115f5f63616e6469646174655f7374617465da03637478da0663616c6c6572da0e417373657274696f6e4572726f72da0863757272656e6379da0d7472616e736665725f66726f6d7213000000da03676574da0474686973da0f5f5f746f705f63616e64696461746572120000007214000000721400000072140000007215000000da08726567697374657214000000730e00000000021201060116010e010e010c017222000000630000000000000000010000000400000043000000736800000074006a0174026a03830083017d007404640174056a06660219007324740764028301820174056a067c006b077336740764038301820174086a09740a6a03830074056a068302010064047404640174056a0666023c0064057404640674056a0666023c006400530029074e72170000007a0f4e6f7420726567697374657265642e7a1f43616e277420756e7374616b6520696620696e20676f7665726e616e63652e4672010000007218000000290bda0e656c656374696f6e5f686f757365da1863757272656e745f76616c75655f666f725f706f6c6963797211000000721f0000007219000000721a000000721b000000721c000000721d000000da087472616e7366657272130000002901da036d6e73721400000072140000007215000000da0a756e72656769737465721f000000730c00000000020e011601120112010e0172270000002901da076164647265737363010000000000000004000000040000004300000073dc000000740064017c0066021900731474016402830182017400640374026a03660219007d017c0164006b08734474047c01180074056a06640414006b0473447401640583018201740774086a09640683011b007d02740a6a0b7c02640774026a038303010074047400640374026a0366023c00740064087c00660219007d037c0364006b0872926404740064087c0066023c006e14740064087c006602050019006404370003003c00740c6a0d830064006b0972d8740064087c006602190074006408740c6a0d8300660219006b0472d8740c6a0e7c00830101006400530029094e72170000007a1943616e646964617465206e6f7420726567697374657265642eda0a6c6173745f766f746564e9010000007a16566f74696e6720616761696e20746f6f20736f6f6e2eda0a7374616d705f636f7374da09626c61636b686f6c657218000000290f7219000000721c000000721a000000721b000000da036e6f77da086461746574696d65da0444415953da0a5354414d505f434f535472230000007224000000721d000000721e0000007221000000721f000000721200000029047228000000da0176da09766f74655f636f73747218000000721400000072140000007215000000da0e766f74655f63616e64696461746529000000732000000000020e0106010e0122010601080110010e010c0108010e0214010c010e010e017233000000630000000000000000000000000100000043000000730800000074006a018300530029014e29027221000000721f0000007214000000721400000072140000007215000000da0a746f705f6d656d6265723e000000730200000000027234000000630000000000000000010000000200000043000000734000000074006a0174026a0383006b0273167404640183018201740583007d007c0064006b0872286400530074066a0764028301010074086a096400830101006400530029034e7a1c57726f6e6720736d61727420636f6e74726163742063616c6c65722e7218000000290a721a000000721b0000007211000000721f000000721c00000072340000007219000000da05636c656172722100000072120000002901da03746f70721400000072140000007215000000da07706f705f746f7043000000730c000000000216010601080104010a01723700000063010000000000000003000000040000004300000073ea0000007c0074006a0174026a03830083016b06731a74046401830182017405640274066a07660219007d017c0164006b08734a74087c01180074096a0a640314006b04734a7404640483018201740b74006a01640583011b007d02740c6a0d7c02640674066a078303010074087405640274066a0766023c00740564077c006602190064006b0872946403740564077c0066023c006e14740564077c006602050019006403370003003c00740e6a03830064006b0872c0740e6a0f7c00830101006e26740564077c006602190074056407740e6a038300660219006b0472e6740e6a0f7c00830101006400530029084e7a2a43616e6e6f7420766f746520616761696e73742061206e6f6e2d636f6d6d6974746565206d656d6265727229000000722a0000007a16566f74696e6720616761696e20746f6f20736f6f6e2e722b000000722c00000072180000002910722300000072240000007211000000721f000000721c000000da155f5f6e6f5f636f6e666964656e63655f7374617465721a000000721b000000722d000000722e000000722f0000007230000000721d000000721e000000da105f5f6c6173745f63616e64696461746572120000002903722800000072310000007232000000721400000072140000007215000000da12766f74655f6e6f5f636f6e666964656e63654d00000073200000000002140106010e0122010601080110010e0110010e0214010c010c010c011001723a000000630000000000000000010000000200000043000000731c00000074006a0183007d007c0064006b0972147c00530074026a018300530029014e2903da145f5f746f5f62655f72656c696e71756973686564721f00000072390000002901da0172721400000072140000007215000000da0b6c6173745f6d656d6265726200000073080000000002080108010401723d000000630000000000000000010000000400000043000000736600000074006a0174026a0383006b027316740464018301820174056a0383007d007c0064006b09723e6402740664037c0066023c0074056a076400830101006e2474066a08640383010100640474096405740a6a03830066023c00740a6a076400830101006400530029064e7a1c57726f6e6720736d61727420636f6e74726163742063616c6c65722e72010000007218000000467217000000290b721a000000721b0000007211000000721f000000721c000000723b000000723800000072120000007235000000721900000072390000002901723c000000721400000072140000007215000000da08706f705f6c6173746a000000731000000000021601080108010c010c020a011001723e000000630100000000000000010000000400000043000000732600000074006a0174026a0383006b02731674046401830182016402740564037c0066023c006400530029044e7a1c57726f6e6720736d61727420636f6e74726163742063616c6c65722e4672170000002906721a000000721b0000007211000000721f000000721c000000721900000029017228000000721400000072140000007215000000da0d666f7263655f72656d6f76616c77000000730400000000021601723f000000630000000000000000010000000300000043000000734000000074006a0174026a0374046a05830083016b0673187406820174076a0583007d007c0064006b087330740664018301820174076a0874006a01830101006400530029024e7a28536f6d656f6e6520697320616c726561647920747279696e6720746f2072656c696e7175697368212909721a000000721b000000722300000072240000007211000000721f000000721c000000723b00000072120000002901723c000000721400000072140000007215000000da0a72656c696e71756973687d0000007308000000000218020801100172400000002902720d000000720e000000291a721d0000007223000000da04486173687219000000da085661726961626c65722100000072380000007239000000723b000000723000000072130000007211000000da03737472da03696e747216000000da085f5f6578706f727472220000007227000000723300000072340000007237000000723a000000723d000000723e000000723f00000072400000007214000000721400000072140000007215000000da083c6d6f64756c653e010000007332000000080108010c010c01040108010c010401080104010c010c031205100b100a060110141005100a060110141008100d06011005"}},{"key":"elect_delegates.__developer__","value":"sys"},{"key":"elect_delegates.__submitted__","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"elect_delegates.controller","value":"delegates"},{"key":"elect_delegates.member_cost","value":100000},{"key":"elect_masternodes.__code__","value":"import currency\nimport election_house\n__candidate_state = Hash(contract='elect_masternodes', name='candidate_state')\n__top_candidate = Variable(contract='elect_masternodes', name='top_candidate')\n__no_confidence_state = Hash(contract='elect_masternodes', name=\n    'no_confidence_state')\n__last_candidate = Variable(contract='elect_masternodes', name='last_candidate'\n    )\n__to_be_relinquished = Variable(contract='elect_masternodes', name=\n    'to_be_relinquished')\nSTAMP_COST = 20\n__member_cost = Variable(contract='elect_masternodes', name='member_cost')\n__controller = Variable(contract='elect_masternodes', name='controller')\n\n\ndef ____(policy: str='members', cost: int=100000):\n    __controller.set(policy)\n    __member_cost.set(cost)\n\n\n@__export('elect_masternodes')\ndef register():\n    assert not __candidate_state['registered', ctx.caller\n        ], 'Already registered.'\n    currency.transfer_from(__member_cost.get(), ctx.this, ctx.caller)\n    __candidate_state['registered', ctx.caller] = True\n    __candidate_state['votes', ctx.caller] = 0\n    if __top_candidate.get() is None:\n        __top_candidate.set(ctx.caller)\n\n\n@__export('elect_masternodes')\ndef unregister():\n    mns = election_house.current_value_for_policy(__controller.get())\n    assert __candidate_state['registered', ctx.caller], 'Not registered.'\n    assert ctx.caller not in mns, \"Can't unstake if in governance.\"\n    currency.transfer(__member_cost.get(), ctx.caller)\n    __candidate_state['registered', ctx.caller] = False\n    __candidate_state['votes', ctx.caller] = 0\n\n\n@__export('elect_masternodes')\ndef vote_candidate(address: str):\n    assert __candidate_state['registered', address\n        ], 'Candidate not registered.'\n    v = __candidate_state['last_voted', ctx.caller]\n    assert v is None or now - v > datetime.DAYS * 1, 'Voting again too soon.'\n    vote_cost = STAMP_COST / election_house.current_value_for_policy(\n        'stamp_cost')\n    currency.transfer_from(vote_cost, 'blackhole', ctx.caller)\n    __candidate_state['last_voted', ctx.caller] = now\n    votes = __candidate_state['votes', address]\n    if votes is None:\n        __candidate_state['votes', address] = 1\n    else:\n        __candidate_state['votes', address] += 1\n    if __top_candidate.get() is not None:\n        if __candidate_state['votes', address] > __candidate_state['votes',\n            __top_candidate.get()]:\n            __top_candidate.set(address)\n\n\n@__export('elect_masternodes')\ndef top_member():\n    return __top_candidate.get()\n\n\n@__export('elect_masternodes')\ndef pop_top():\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    top = top_member()\n    if top is None:\n        return None\n    __candidate_state.clear('votes')\n    __top_candidate.set(None)\n\n\n@__export('elect_masternodes')\ndef vote_no_confidence(address: str):\n    assert address in election_house.current_value_for_policy(__controller.\n        get()), 'Cannot vote against a non-committee member'\n    v = __no_confidence_state['last_voted', ctx.caller]\n    assert v is None or now - v > datetime.DAYS * 1, 'Voting again too soon.'\n    vote_cost = STAMP_COST / election_house.current_value_for_policy(\n        'stamp_cost')\n    currency.transfer_from(vote_cost, 'blackhole', ctx.caller)\n    __no_confidence_state['last_voted', ctx.caller] = now\n    if __no_confidence_state['votes', address] is None:\n        __no_confidence_state['votes', address] = 1\n    else:\n        __no_confidence_state['votes', address] += 1\n    if __last_candidate.get() is None:\n        __last_candidate.set(address)\n    elif __no_confidence_state['votes', address] > __no_confidence_state[\n        'votes', __last_candidate.get()]:\n        __last_candidate.set(address)\n\n\n@__export('elect_masternodes')\ndef last_member():\n    r = __to_be_relinquished.get()\n    if r is not None:\n        return r\n    return __last_candidate.get()\n\n\n@__export('elect_masternodes')\ndef pop_last():\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    r = __to_be_relinquished.get()\n    if r is not None:\n        __no_confidence_state['votes', r] = 0\n        __to_be_relinquished.set(None)\n    else:\n        __no_confidence_state.clear('votes')\n        __candidate_state['registered', __last_candidate.get()] = False\n        __last_candidate.set(None)\n\n\n@__export('elect_masternodes')\ndef force_removal(address: str):\n    assert ctx.caller == __controller.get(), 'Wrong smart contract caller.'\n    __candidate_state['registered', address] = False\n\n\n@__export('elect_masternodes')\ndef relinquish():\n    assert ctx.caller in election_house.current_value_for_policy(__controller\n        .get())\n    r = __to_be_relinquished.get()\n    assert r is None, 'Someone is already trying to relinquish!'\n    __to_be_relinquished.set(ctx.caller)\n"},{"key":"elect_masternodes.__compiled__","value":{"__bytes__":"e300000000000000000000000004000000400000007330010000640064016c005a00640064016c015a0165026402640364048d025a0365046402640564048d025a0565026402640664048d025a0665046402640764048d025a0765046402640864048d025a0864095a0965046402640a64048d025a0a65046402640b64048d025a0b6426650c650d640e9c02640f641084055a0e650f6402830164116412840083015a10650f6402830164136414840083015a11650f64028301650c64159c0164166417840483015a12650f6402830164186419840083015a13650f64028301641a641b840083015a14650f64028301650c64159c01641c641d840483015a15650f64028301641e641f840083015a16650f6402830164206421840083015a17650f64028301650c64159c0164226423840483015a18650f6402830164246425840083015a19640153002927e9000000004eda11656c6563745f6d61737465726e6f646573da0f63616e6469646174655f73746174652902da08636f6e7472616374da046e616d65da0d746f705f63616e646964617465da136e6f5f636f6e666964656e63655f7374617465da0e6c6173745f63616e646964617465da12746f5f62655f72656c696e71756973686564e914000000da0b6d656d6265725f636f7374da0a636f6e74726f6c6c6572da076d656d62657273e9a08601002902da06706f6c696379da04636f7374630200000000000000020000000200000043000000731800000074006a017c008301010074026a017c01830101006400530029014e2903da0c5f5f636f6e74726f6c6c6572da03736574da0d5f5f6d656d6265725f636f73742902720f0000007210000000a9007214000000da00da045f5f5f5f10000000730400000000010a01721600000063000000000000000000000000040000004300000073660000007400640174016a02660219000c007318740364028301820174046a0574066a07830074016a0874016a028303010064037400640174016a0266023c0064047400640574016a0266023c0074096a07830064006b08726274096a0a74016a02830101006400530029064eda0a726567697374657265647a13416c726561647920726567697374657265642e547201000000da05766f746573290bda115f5f63616e6469646174655f7374617465da03637478da0663616c6c6572da0e417373657274696f6e4572726f72da0863757272656e6379da0d7472616e736665725f66726f6d7213000000da03676574da0474686973da0f5f5f746f705f63616e64696461746572120000007214000000721400000072140000007215000000da08726567697374657215000000730e00000000021201060116010e010e010c017222000000630000000000000000010000000400000043000000736800000074006a0174026a03830083017d007404640174056a06660219007324740764028301820174056a067c006b077336740764038301820174086a09740a6a03830074056a068302010064047404640174056a0666023c0064057404640674056a0666023c006400530029074e72170000007a0f4e6f7420726567697374657265642e7a1f43616e277420756e7374616b6520696620696e20676f7665726e616e63652e4672010000007218000000290bda0e656c656374696f6e5f686f757365da1863757272656e745f76616c75655f666f725f706f6c6963797211000000721f0000007219000000721a000000721b000000721c000000721d000000da087472616e7366657272130000002901da036d6e73721400000072140000007215000000da0a756e726567697374657220000000730c00000000020e011601120112010e0172270000002901da076164647265737363010000000000000004000000040000004300000073dc000000740064017c0066021900731474016402830182017400640374026a03660219007d017c0164006b08734474047c01180074056a06640414006b0473447401640583018201740774086a09640683011b007d02740a6a0b7c02640774026a038303010074047400640374026a0366023c00740064087c00660219007d037c0364006b0872926404740064087c0066023c006e14740064087c006602050019006404370003003c00740c6a0d830064006b0972d8740064087c006602190074006408740c6a0d8300660219006b0472d8740c6a0e7c00830101006400530029094e72170000007a1943616e646964617465206e6f7420726567697374657265642eda0a6c6173745f766f746564e9010000007a16566f74696e6720616761696e20746f6f20736f6f6e2eda0a7374616d705f636f7374da09626c61636b686f6c657218000000290f7219000000721c000000721a000000721b000000da036e6f77da086461746574696d65da0444415953da0a5354414d505f434f535472230000007224000000721d000000721e0000007221000000721f000000721200000029047228000000da0176da09766f74655f636f73747218000000721400000072140000007215000000da0e766f74655f63616e6469646174652a000000732000000000020e0106010e0122010601080110010e010c0108010e0214010c010e010e017233000000630000000000000000000000000100000043000000730800000074006a018300530029014e29027221000000721f0000007214000000721400000072140000007215000000da0a746f705f6d656d6265723f000000730200000000027234000000630000000000000000010000000200000043000000734000000074006a0174026a0383006b0273167404640183018201740583007d007c0064006b0872286400530074066a0764028301010074086a096400830101006400530029034e7a1c57726f6e6720736d61727420636f6e74726163742063616c6c65722e7218000000290a721a000000721b0000007211000000721f000000721c00000072340000007219000000da05636c656172722100000072120000002901da03746f70721400000072140000007215000000da07706f705f746f7044000000730c000000000216010601080104010a01723700000063010000000000000003000000040000004300000073ea0000007c0074006a0174026a03830083016b06731a74046401830182017405640274066a07660219007d017c0164006b08734a74087c01180074096a0a640314006b04734a7404640483018201740b74006a01640583011b007d02740c6a0d7c02640674066a078303010074087405640274066a0766023c00740564077c006602190064006b0872946403740564077c0066023c006e14740564077c006602050019006403370003003c00740e6a03830064006b0872c0740e6a0f7c00830101006e26740564077c006602190074056407740e6a038300660219006b0472e6740e6a0f7c00830101006400530029084e7a2a43616e6e6f7420766f746520616761696e73742061206e6f6e2d636f6d6d6974746565206d656d6265727229000000722a0000007a16566f74696e6720616761696e20746f6f20736f6f6e2e722b000000722c00000072180000002910722300000072240000007211000000721f000000721c000000da155f5f6e6f5f636f6e666964656e63655f7374617465721a000000721b000000722d000000722e000000722f0000007230000000721d000000721e000000da105f5f6c6173745f63616e64696461746572120000002903722800000072310000007232000000721400000072140000007215000000da12766f74655f6e6f5f636f6e666964656e63654e00000073200000000002140106010e0122010601080110010e0110010e0214010c010c010c011001723a000000630000000000000000010000000200000043000000731c00000074006a0183007d007c0064006b0972147c00530074026a018300530029014e2903da145f5f746f5f62655f72656c696e71756973686564721f00000072390000002901da0172721400000072140000007215000000da0b6c6173745f6d656d6265726300000073080000000002080108010401723d000000630000000000000000010000000400000043000000736600000074006a0174026a0383006b027316740464018301820174056a0383007d007c0064006b09723e6402740664037c0066023c0074056a076400830101006e2474066a08640383010100640474096405740a6a03830066023c00740a6a076400830101006400530029064e7a1c57726f6e6720736d61727420636f6e74726163742063616c6c65722e72010000007218000000467217000000290b721a000000721b0000007211000000721f000000721c000000723b000000723800000072120000007235000000721900000072390000002901723c000000721400000072140000007215000000da08706f705f6c6173746b000000731000000000021601080108010c010c020a011001723e000000630100000000000000010000000400000043000000732600000074006a0174026a0383006b02731674046401830182016402740564037c0066023c006400530029044e7a1c57726f6e6720736d61727420636f6e74726163742063616c6c65722e4672170000002906721a000000721b0000007211000000721f000000721c000000721900000029017228000000721400000072140000007215000000da0d666f7263655f72656d6f76616c78000000730400000000021601723f000000630000000000000000010000000300000043000000734000000074006a0174026a0374046a05830083016b0673187406820174076a0583007d007c0064006b087330740664018301820174076a0874006a01830101006400530029024e7a28536f6d656f6e6520697320616c726561647920747279696e6720746f2072656c696e7175697368212909721a000000721b000000722300000072240000007211000000721f000000721c000000723b00000072120000002901723c000000721400000072140000007215000000da0a72656c696e71756973687e0000007308000000000218020801100172400000002902720d000000720e000000291a721d0000007223000000da04486173687219000000da085661726961626c65722100000072380000007239000000723b000000723000000072130000007211000000da03737472da03696e747216000000da085f5f6578706f727472220000007227000000723300000072340000007237000000723a000000723d000000723e000000723f00000072400000007214000000721400000072140000007215000000da083c6d6f64756c653e010000007332000000080108010c010c01040108010c020401080104010c010c031205100b100a060110141005100a060110141008100d06011005"}},{"key":"elect_masternodes.__developer__","value":"sys"},{"key":"elect_masternodes.__submitted__","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"elect_masternodes.controller","value":"masternodes"},{"key":"elect_masternodes.member_cost","value":100000},{"key":"election_house.__code__","value":"I = importlib\n__policies = Hash(contract='election_house', name='policies')\npolicy_interface = [I.Func('vote', args=('vk', 'obj')), I.Func('current_value')\n    ]\n\n\n@__export('election_house')\ndef register_policy(contract: str):\n    if __policies[contract] is None:\n        p = I.import_module(contract)\n        assert I.owner_of(p\n            ) == ctx.this, 'Election house must control the policy contract!'\n        assert I.enforce_interface(p, policy_interface\n            ), 'Policy contract does not follow the correct interface'\n        __policies[contract] = True\n    else:\n        raise Exception('Policy already registered')\n\n\n@__export('election_house')\ndef current_value_for_policy(policy: str):\n    assert __policies[policy] is not None, f'Invalid policy: {policy}.'\n    p = I.import_module(policy)\n    return p.current_value()\n\n\n@__export('election_house')\ndef vote(policy: str, value: Any):\n    assert __policies[policy] is not None, 'Invalid policy.'\n    p = I.import_module(policy)\n    p.vote(vk=ctx.caller, obj=value)\n"},{"key":"election_house.__compiled__","value":{"__bytes__":"e30000000000000000000000000400000040000000737000000065005a0165026400640164028d025a0365016a046403641164068d0265016a046407830167025a05650664008301650764089c016409640a840483015a086506640083016507640b9c01640c640d840483015a096506640083016507650a640e9c02640f6403840483015a0b641053002912da0e656c656374696f6e5f686f757365da08706f6c69636965732902da08636f6e7472616374da046e616d65da04766f7465da02766bda036f626a2901da0461726773da0d63757272656e745f76616c756529017203000000630100000000000000020000000300000043000000735800000074007c00190064006b08724c74016a027c0083017d0174016a037c01830174046a056b02732e740664018301820174016a077c017408830273427406640283018201640374007c003c006e0874096404830182016400530029054e7a30456c656374696f6e20686f757365206d75737420636f6e74726f6c2074686520706f6c69637920636f6e7472616374217a35506f6c69637920636f6e747261637420646f6573206e6f7420666f6c6c6f772074686520636f727265637420696e74657266616365547a19506f6c69637920616c72656164792072656769737465726564290ada0a5f5f706f6c6963696573da0149da0d696d706f72745f6d6f64756c65da086f776e65725f6f66da03637478da0474686973da0e417373657274696f6e4572726f72da11656e666f7263655f696e74657266616365da10706f6c6963795f696e74657266616365da09457863657074696f6e29027203000000da0170a9007215000000da00da0f72656769737465725f706f6c69637907000000731000000000020c010a01080110010e0106010a0272170000002901da06706f6c696379630100000000000000020000000400000043000000732e00000074007c00190064006b09731c740164017c009b0064029d038301820174026a037c0083017d017c016a048300530029034e7a10496e76616c696420706f6c6963793a20da012e2905720a0000007210000000720b000000720c0000007209000000290272180000007214000000721500000072150000007216000000da1863757272656e745f76616c75655f666f725f706f6c69637914000000730600000000021c010a01721a00000029027218000000da0576616c7565630200000000000000030000000400000043000000733200000074007c00190064006b097314740164018301820174026a037c0083017d027c026a0474056a067c0164028d0201006400530029034e7a0f496e76616c696420706f6c6963792e2902720600000072070000002907720a0000007210000000720b000000720c0000007205000000720e000000da0663616c6c657229037218000000721b000000721400000072150000007215000000721600000072050000001b0000007306000000000214010a014e290272060000007207000000290cda09696d706f72746c6962720b000000da0448617368720a000000da0446756e637212000000da085f5f6578706f7274da037374727217000000721a000000da03416e7972050000007215000000721500000072150000007216000000da083c6d6f64756c653e01000000731000000004010c0118040601100c060110060601"}},{"key":"election_house.__developer__","value":"sys"},{"key":"election_house.__submitted__","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"election_house.policies:delegates","value":true},{"key":"election_house.policies:masternodes","value":true},{"key":"election_house.policies:rewards","value":true},{"key":"election_house.policies:stamp_cost","value":true},{"key":"foundation.__code__","value":"import currency\n__owner = Variable(contract='foundation', name='owner')\n\n\ndef ____(vk: str):\n    __owner.set(vk)\n\n\n@__export('foundation')\ndef withdraw(amount: float):\n    assert amount > 0, 'Cannot send negative balances!'\n    assert ctx.caller == __owner.get(), 'Not owner!'\n    currency.transfer(amount, ctx.caller)\n\n\n@__export('foundation')\ndef change_owner(vk: str):\n    assert ctx.caller == __owner.get(), 'Not owner!'\n    __owner.set(vk)\n"},{"key":"foundation.__compiled__","value":{"__bytes__":"e300000000000000000000000004000000400000007352000000640064016c005a0065016402640364048d025a02650364059c016406640784045a04650564028301650664089c016409640a840483015a07650564028301650364059c01640b640c840483015a0864015300290de9000000004eda0a666f756e646174696f6eda056f776e65722902da08636f6e7472616374da046e616d652901da02766b630100000000000000010000000200000043000000730e00000074006a017c00830101006400530029014e2902da075f5f6f776e6572da0373657429017206000000a9007209000000da00da045f5f5f5f0500000073020000000001720b0000002901da06616d6f756e7463010000000000000001000000030000004300000073380000007c0064016b047310740064028301820174016a0274036a0483006b027326740064038301820174056a067c0074016a02830201006400530029044e72010000007a1e43616e6e6f742073656e64206e656761746976652062616c616e636573217a0a4e6f74206f776e6572212907da0e417373657274696f6e4572726f72da03637478da0663616c6c65727207000000da03676574da0863757272656e6379da087472616e736665722901720c00000072090000007209000000720a000000da0877697468647261770900000073060000000002100116017213000000630100000000000000010000000200000043000000732400000074006a0174026a0383006b027316740464018301820174026a057c00830101006400530029024e7a0a4e6f74206f776e6572212906720e000000720f00000072070000007210000000720d00000072080000002901720600000072090000007209000000720a000000da0c6368616e67655f6f776e657210000000730400000000021601721400000029097211000000da085661726961626c657207000000da03737472720b000000da085f5f6578706f7274da05666c6f617472130000007214000000720900000072090000007209000000720a000000da083c6d6f64756c653e01000000730c00000008010c030e04060110060601"}},{"key":"foundation.__developer__","value":"sys"},{"key":"foundation.__submitted__","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"foundation.owner","value":"0000803efd5df09c75c0c6670742db5074e5a011b829dfd8a0c50726d263a345"},{"key":"masternodes.S:current_motion","value":0},{"key":"masternodes.S:members","value":["92e45fb91c8f76fbfdc1ff2a58c2e901f3f56ec38d2f10f94ac52fcfa56fce2e"]},{"key":"masternodes.S:motion_opened","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"masternodes.S:nays","value":0},{"key":"masternodes.S:yays","value":0},{"key":"masternodes.__code__","value":"INTRODUCE_MOTION = 'introduce_motion'\nVOTE_ON_MOTION = 'vote_on_motion'\nNO_MOTION = 0\nREMOVE_MEMBER = 1\nADD_SEAT = 2\nREMOVE_SEAT = 3\nVOTING_PERIOD = datetime.DAYS * 1\n__S = Hash(contract='masternodes', name='S')\n__minimum_nodes = Variable(contract='masternodes', name='minimum_nodes')\n__candidate_contract = Variable(contract='masternodes', name=\n    'candidate_contract')\n\n\ndef ____(initial_members: list, minimum: int=1, candidate: str='elect_members'\n    ):\n    __S['members'] = initial_members\n    __minimum_nodes.set(minimum)\n    __candidate_contract.set(candidate)\n    __S['yays'] = 0\n    __S['nays'] = 0\n    __S['current_motion'] = NO_MOTION\n    __S['motion_opened'] = now\n\n\n@__export('masternodes')\ndef quorum_max():\n    return int(len(__S['members']) * 2 / 3) + 1\n\n\n@__export('masternodes')\ndef quorum_min():\n    return min(quorum_max(), __minimum_nodes.get())\n\n\n@__export('masternodes')\ndef current_value():\n    return __S['members']\n\n\n@__export('masternodes')\ndef vote(vk: str, obj: list):\n    assert type(obj) == list, 'Pass a list!'\n    arg = None\n    if len(obj) == 3:\n        action, position, arg = obj\n    else:\n        action, position = obj\n    __assert_vote_is_valid(vk, action, position, arg)\n    if action == INTRODUCE_MOTION:\n        __introduce_motion(position, arg)\n    else:\n        assert __S['current_motion'] != NO_MOTION, 'No motion proposed.'\n        assert __S['positions', vk] is None, 'VK already voted.'\n        if position is True:\n            __S['yays'] += 1\n            __S['positions', vk] = position\n        else:\n            __S['nays'] += 1\n            __S['positions', vk] = position\n        if __S['yays'] >= len(__S['members']) // 2 + 1:\n            __pass_current_motion()\n            __reset()\n        elif __S['nays'] >= len(__S['members']) // 2 + 1:\n            __reset()\n        elif now - __S['motion_opened'] >= VOTING_PERIOD:\n            __reset()\n\n\ndef __assert_vote_is_valid(vk: str, action: str, position: bool, arg: Any=None\n    ):\n    assert vk in __S['members'], 'Not a member.'\n    assert action in [INTRODUCE_MOTION, VOTE_ON_MOTION], 'Invalid action.'\n    if action == INTRODUCE_MOTION:\n        assert __S['current_motion'] == NO_MOTION, 'Already in motion.'\n        assert 0 < position <= REMOVE_SEAT, 'Invalid motion.'\n        if position == REMOVE_MEMBER:\n            __assert_vk_is_valid(arg)\n    elif action == VOTE_ON_MOTION:\n        assert type(position) == bool, 'Invalid position'\n\n\ndef __assert_vk_is_valid(vk: str):\n    assert vk is not None, 'No VK provided.'\n    assert type(vk) == str, 'VK not a string.'\n    assert len(vk) == 64, 'VK is not 64 characters.'\n    int(vk, 16)\n\n\ndef __introduce_motion(position: int, arg: Any):\n    assert position <= REMOVE_SEAT, 'Invalid position.'\n    if position == REMOVE_MEMBER:\n        assert arg in __S['members'], 'Member does not exist.'\n        assert len(__S['members']) > __minimum_nodes.get(\n            ), 'Cannot drop below current quorum.'\n        __S['member_in_question'] = arg\n    __S['current_motion'] = position\n    __S['motion_opened'] = now\n\n\ndef __pass_current_motion():\n    current_motion = __S['current_motion']\n    members = __S['members']\n    if current_motion == REMOVE_MEMBER:\n        members.remove(__S['member_in_question'])\n    elif current_motion == ADD_SEAT:\n        member_candidates = importlib.import_module(__candidate_contract.get())\n        new_mem = member_candidates.top_member()\n        if new_mem is not None:\n            members.append(new_mem)\n            member_candidates.pop_top()\n    elif current_motion == REMOVE_SEAT:\n        member_candidates = importlib.import_module(__candidate_contract.get())\n        old_mem = member_candidates.last_member()\n        if old_mem is not None:\n            members.remove(old_mem)\n            member_candidates.pop_last()\n    __S['members'] = members\n\n\ndef __reset():\n    __S['current_motion'] = NO_MOTION\n    __S['member_in_question'] = None\n    __S['yays'] = 0\n    __S['nays'] = 0\n    __S.clear('positions')\n"},{"key":"masternodes.__compiled__","value":{"__bytes__":"e3000000000000000000000000060000004000000073ea00000064005a0064015a0164025a0264035a0364045a0464055a0565066a07640314005a0865096406640764088d025a0a650b6406640964088d025a0c650b6406640a64088d025a0d6426650e650f6510640c9c03640d640e84055a11651264068301640f6410840083015a1365126406830164116412840083015a1465126406830164136414840083015a156512640683016510650e64159c0264166417840483015a166427651065106517651864199c04641a641b84055a196510641c9c01641d641e84045a1a650f6518641f9c026420642184045a1b6422642384005a1c6424642584005a1d641853002928da10696e74726f647563655f6d6f74696f6eda0e766f74655f6f6e5f6d6f74696f6ee900000000e901000000e902000000e903000000da0b6d61737465726e6f646573da01532902da08636f6e7472616374da046e616d65da0d6d696e696d756d5f6e6f646573da1263616e6469646174655f636f6e7472616374da0d656c6563745f6d656d626572732903da0f696e697469616c5f6d656d62657273da076d696e696d756dda0963616e64696461746563030000000000000003000000030000004300000073400000007c00740064013c0074016a027c018301010074036a027c02830101006402740064033c006402740064043c007404740064053c007405740064063c006400530029074eda076d656d626572737203000000da0479617973da046e617973da0e63757272656e745f6d6f74696f6eda0d6d6f74696f6e5f6f70656e65642906da035f5f53da0f5f5f6d696e696d756d5f6e6f646573da03736574da145f5f63616e6469646174655f636f6e7472616374da094e4f5f4d4f54494f4eda036e6f772903720e000000720f0000007210000000a900721c000000da00da045f5f5f5f0e000000730e000000000208010a010a01080108010801721e000000630000000000000000000000000400000043000000731c0000007400740174026401190083016402140064031b00830164041700530029054e72110000007205000000720600000072040000002903da03696e74da036c656e7216000000721c000000721c000000721c000000721d000000da0a71756f72756d5f6d617819000000730200000000027221000000630000000000000000000000000300000043000000731000000074007401830074026a0383008302530029014e2904da036d696e72210000007217000000da03676574721c000000721c000000721c000000721d000000da0a71756f72756d5f6d696e1e0000007302000000000272240000006300000000000000000000000002000000430000007308000000740064011900530029024e721100000029017216000000721c000000721c000000721c000000721d000000da0d63757272656e745f76616c7565230000007302000000000272250000002902da02766bda036f626a630200000000000000050000000500000043000000733401000074007c01830174016b027314740264018301820164007d0274037c01830164026b0272307c015c037d037d047d026e087c015c027d037d0474047c007c037c047c02830401007c0374056b02725a74067c047c02830201006ed674076403190074086b03736e7402640483018201740764057c006602190064006b08738674026406830182017c0464076b0872ac74076408050019006409370003003c007c04740764057c0066023c006e1c7407640a050019006409370003003c007c04740764057c0066023c0074076408190074037407640b19008301640c1a00640917006b0572f2740983000100740a830001006e3e7407640a190074037407640b19008301640c1a00640917006b0590017218740a830001006e18740b7407640d19001800740c6b0590017230740a8300010064005300290e4e7a0c506173732061206c69737421720600000072140000007a134e6f206d6f74696f6e2070726f706f7365642eda09706f736974696f6e737a11564b20616c726561647920766f7465642e54721200000072040000007213000000721100000072050000007215000000290dda0474797065da046c697374da0e417373657274696f6e4572726f727220000000da165f5f6173736572745f766f74655f69735f76616c6964da10494e54524f445543455f4d4f54494f4eda125f5f696e74726f647563655f6d6f74696f6e7216000000721a000000da155f5f706173735f63757272656e745f6d6f74696f6eda075f5f7265736574721b000000da0d564f54494e475f504552494f44290572260000007227000000da03617267da06616374696f6eda08706f736974696f6e721c000000721c000000721d000000da04766f746528000000732c0000000002140104010c010c0208010e0108010c0214011801080110010e0210010c011c01060108011e010801120172350000004e2904722600000072330000007234000000723200000063040000000000000004000000030000004300000073960000007c007400640119006b06731474016402830182017c017402740367026b06732874016403830182017c0174026b02727674006404190074046b027344740164058301820164067c02040003006b006f5674056b016e0402000100736474016407830182017c0274066b02729274077c03830101006e1c7c0174036b02729274087c02830174096b02739274016408830182016400530029094e72110000007a0d4e6f742061206d656d6265722e7a0f496e76616c696420616374696f6e2e72140000007a12416c726561647920696e206d6f74696f6e2e72030000007a0f496e76616c6964206d6f74696f6e2e7a10496e76616c696420706f736974696f6e290a7216000000722b000000722d000000da0e564f54455f4f4e5f4d4f54494f4e721a000000da0b52454d4f56455f53454154da0d52454d4f56455f4d454d424552da145f5f6173736572745f766b5f69735f76616c69647229000000da04626f6f6c29047226000000723300000072340000007232000000721c000000721c000000721d000000722c00000045000000731200000000021401140108011401200108010a010801722c0000002901722600000063010000000000000001000000030000004300000073460000007c0064006b097310740064018301820174017c00830174026b027324740064028301820174037c00830164036b027338740064048301820174047c006405830201006400530029064e7a0f4e6f20564b2070726f76696465642e7a10564b206e6f74206120737472696e672ee9400000007a18564b206973206e6f7420363420636861726163746572732ee9100000002905722b0000007229000000da037374727220000000721f00000029017226000000721c000000721c000000721d00000072390000005200000073080000000001100114011401723900000029027234000000723200000063020000000000000002000000030000004300000073640000007c0074006b01731074016401830182017c0074026b0272507c017403640219006b06732c74016403830182017404740364021900830174056a0683006b04734874016404830182017c01740364053c007c00740364063c007407740364073c006400530029084e7a11496e76616c696420706f736974696f6e2e72110000007a164d656d62657220646f6573206e6f742065786973742e7a2143616e6e6f742064726f702062656c6f772063757272656e742071756f72756d2eda126d656d6265725f696e5f7175657374696f6e7214000000721500000029087237000000722b00000072380000007216000000722000000072170000007223000000721b000000290272340000007232000000721c000000721c000000721d000000722e00000059000000731000000000011001080114011601060108010801722e00000063000000000000000005000000030000004300000073a60000007400640119007d007400640219007d017c0074016b0272287c016a02740064031900830101006e727c0074036b02726274046a0574066a07830083017d027c026a0883007d037c0364006b09729a7c016a097c03830101007c026a0a830001006e387c00740b6b02729a74046a0574066a07830083017d027c026a0c83007d047c0464006b09729a7c016a027c04830101007c026a0d830001007c01740064023c006400530029044e72140000007211000000723e000000290e72160000007238000000da0672656d6f7665da084144445f53454154da09696d706f72746c6962da0d696d706f72745f6d6f64756c6572190000007223000000da0a746f705f6d656d626572da06617070656e64da07706f705f746f707237000000da0b6c6173745f6d656d626572da08706f705f6c617374290572140000007211000000da116d656d6265725f63616e64696461746573da076e65775f6d656dda076f6c645f6d656d721c000000721c000000721d000000722f0000006400000073220000000001080108010801100108010e01080108010a010a0108010e01080108010a010801722f000000630000000000000000000000000300000043000000732e0000007400740164013c006400740164023c006403740164043c006403740164053c0074016a026406830101006400530029074e7214000000723e00000072030000007212000000721300000072280000002903721a0000007216000000da05636c656172721c000000721c000000721c000000721d000000723000000078000000730a00000000010801080108010801723000000029027204000000720d00000029014e291e722d0000007236000000721a000000723800000072400000007237000000da086461746574696d65da04444159537231000000da04486173687216000000da085661726961626c6572170000007219000000722a000000721f000000723d000000721e000000da085f5f6578706f72747221000000722400000072250000007235000000723a000000da03416e79722c0000007239000000722e000000722f0000007230000000721c000000721c000000721c000000721d000000da083c6d6f64756c653e01000000732a0000000401040104010401040104010a010c010c0104010803140b1005100510050601121c160d0e07100b0814"}},{"key":"masternodes.__developer__","value":"sys"},{"key":"masternodes.__owner__","value":"election_house"},{"key":"masternodes.__submitted__","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"masternodes.candidate_contract","value":"elect_masternodes"},{"key":"masternodes.minimum_nodes","value":1},{"key":"rewards.S:current_votes:blackhole","value":0},{"key":"rewards.S:current_votes:delegates","value":0},{"key":"rewards.S:current_votes:developer","value":0},{"key":"rewards.S:current_votes:foundation","value":0},{"key":"rewards.S:current_votes:masternodes","value":0},{"key":"rewards.S:delegate_contract","value":"delegates"},{"key":"rewards.S:election_max_length","value":{"__delta__":[1,0]}},{"key":"rewards.S:master_contract","value":"masternodes"},{"key":"rewards.S:value","value":[{"__fixed__":"0.44"},{"__fixed__":"0.44"},{"__fixed__":"0.01"},{"__fixed__":"0.01"},{"__fixed__":"0.1"}]},{"key":"rewards.S:vote_count","value":0},{"key":"rewards.__code__","value":"import election_house\n__S = Hash(contract='rewards', name='S')\n\n\ndef ____(initial_split: list=[decimal('0.44'), decimal('0.44'), decimal(\n    '0.01'), decimal('0.01'), decimal('0.1')], master_contract=\n    'masternodes', delegate_contract='delegates', election_max_length=\n    datetime.DAYS * 1):\n    __S['value'] = initial_split\n    __S['master_contract'] = master_contract\n    __S['delegate_contract'] = delegate_contract\n    __S['election_max_length'] = election_max_length\n    __S['vote_count'] = 0\n    __reset_current_votes()\n\n\ndef __reset_current_votes():\n    __S['current_votes', 'masternodes'] = 0\n    __S['current_votes', 'delegates'] = 0\n    __S['current_votes', 'blackhole'] = 0\n    __S['current_votes', 'foundation'] = 0\n    __S['current_votes', 'developer'] = 0\n\n\n@__export('rewards')\ndef current_value():\n    return __S['value']\n\n\n@__export('rewards')\ndef vote(vk: str, obj: list):\n    if __S['election_start'] is None:\n        total_nodes = len(election_house.current_value_for_policy(__S[\n            'master_contract'])) + len(election_house.\n            current_value_for_policy(__S['delegate_contract']))\n        __S['vote_count'] = 0\n        __S['min_votes_required'] = total_nodes * 2 // 3 + 1\n        __S['election_start'] = now\n        __S.clear('has_voted')\n        __reset_current_votes()\n        __tally_vote(vk, obj)\n    else:\n        __tally_vote(vk, obj)\n        if __election_is_over():\n            __update_value()\n            __S['election_start'] = None\n\n\ndef __update_value():\n    masternode_votes = __S['current_votes', 'masternodes'] or 1\n    delegate_votes = __S['current_votes', 'delegates'] or 1\n    blackhole_votes = __S['current_votes', 'blackhole'] or 1\n    foundation_votes = __S['current_votes', 'foundation'] or 1\n    developer_votes = __S['current_votes', 'developer'] or 1\n    total_votes = (masternode_votes + delegate_votes + blackhole_votes +\n        foundation_votes + developer_votes)\n    mn = masternode_votes / total_votes\n    dl = delegate_votes / total_votes\n    bh = blackhole_votes / total_votes\n    fd = foundation_votes / total_votes\n    dv = developer_votes / total_votes\n    __S['value'] = [mn, dl, bh, fd, dv]\n\n\ndef __election_is_over():\n    return __S['vote_count'] >= __S['min_votes_required'] or now - __S[\n        'election_start'] >= __S['election_max_length']\n\n\ndef __tally_vote(vk: str, obj: list):\n    __validate_vote(vk, obj)\n    a, b, c, d, e = obj\n    __S['current_votes', 'masternodes'] += a\n    __S['current_votes', 'delegates'] += b\n    __S['current_votes', 'blackhole'] += c\n    __S['current_votes', 'foundation'] += d\n    __S['current_votes', 'developer'] += e\n    __S['has_voted', vk] = True\n    __S['vote_count'] += 1\n\n\ndef __validate_vote(vk: str, obj: list):\n    assert vk in election_house.current_value_for_policy(__S['master_contract']\n        ) or vk in election_house.current_value_for_policy(__S[\n        'delegate_contract']), 'Not allowed to vote!'\n    assert type(obj) == list, 'Pass a list!'\n    assert len(obj) == 5, 'Must have 5 elements!'\n    s = 0\n    for o in obj:\n        assert int(o) >= 0, 'No non-negative numbers!'\n        s += o\n    assert s == 100, 'Elements must add to 100!'\n    assert __S['has_voted', vk] is None, 'VK has already voted!'\n"},{"key":"rewards.__compiled__","value":{"__bytes__":"e3000000000000000000000000060000004000000073b4000000640064016c005a0065016402640364048d025a0265036405830165036405830165036406830165036406830165036407830167056408640965046a05640a140066046506640b9c01640c640d84055a07640e640f84005a0865096402830164106411840083015a0a650964028301650b650664129c0264136414840483015a0c6415641684005a0d6417641884005a0e650b650664129c026419641a84045a0f650b650664129c02641b641c84045a1064015300291de9000000004eda0772657761726473da01532902da08636f6e7472616374da046e616d657a04302e34347a04302e30317a03302e31da0b6d61737465726e6f646573da0964656c656761746573e9010000002901da0d696e697469616c5f73706c697463040000000000000004000000030000004300000073320000007c00740064013c007c01740064023c007c02740064033c007c03740064043c006405740064063c007401830001006400530029074eda0576616c7565da0f6d61737465725f636f6e7472616374da1164656c65676174655f636f6e7472616374da13656c656374696f6e5f6d61785f6c656e6774687201000000da0a766f74655f636f756e742902da035f5f53da155f5f72657365745f63757272656e745f766f74657329047209000000720b000000720c000000720d000000a9007211000000da00da045f5f5f5f05000000730c0000000004080108010801080108017213000000630000000000000000000000000400000043000000732c0000006401740064083c006401740064093c0064017400640a3c0064017400640b3c0064017400640c3c0064005300290d4e7201000000da0d63757272656e745f766f74657372060000007207000000da09626c61636b686f6c65da0a666f756e646174696f6eda09646576656c6f7065722902721400000072060000002902721400000072070000002902721400000072150000002902721400000072160000002902721400000072170000002901720f0000007211000000721100000072110000007212000000721000000011000000730a0000000001080108010801080172100000006300000000000000000000000002000000430000007308000000740064011900530029024e720a0000002901720f0000007211000000721100000072110000007212000000da0d63757272656e745f76616c7565190000007302000000000272180000002902da02766bda036f626a630200000000000000030000000500000043000000739200000074006401190064006b087270740174026a0374006402190083018301740174026a037400640319008301830117007d026404740064053c007c026406140064071a0064081700740064093c007404740064013c0074006a05640a8301010074068300010074077c007c01830201006e1e74077c007c018302010074088300728e7409830001006400740064013c0064005300290b4eda0e656c656374696f6e5f7374617274720b000000720c0000007201000000720e000000e902000000e9030000007208000000da126d696e5f766f7465735f7265717569726564da096861735f766f746564290a720f000000da036c656eda0e656c656374696f6e5f686f757365da1863757272656e745f76616c75655f666f725f706f6c696379da036e6f77da05636c6561727210000000da0c5f5f74616c6c795f766f7465da125f5f656c656374696f6e5f69735f6f766572da0e5f5f7570646174655f76616c756529037219000000721a000000da0b746f74616c5f6e6f646573721100000072110000007212000000da04766f74651e000000731c00000000020c0108010e010e010801140108010a0106010c020a010601060172290000006300000000000000000b0000000500000043000000738e000000740064091900700a64037d007400640a1900701664037d017400640b1900702264037d027400640c1900702e64037d037400640d1900703a64037d047c007c0117007c0217007c0317007c0417007d057c007c051b007d067c017c051b007d077c027c051b007d087c037c051b007d097c047c051b007d0a7c067c077c087c097c0a6705740064083c0064005300290e4e7214000000720600000072080000007207000000721500000072160000007217000000720a0000002902721400000072060000002902721400000072070000002902721400000072150000002902721400000072160000002902721400000072170000002901720f000000290bda106d61737465726e6f64655f766f746573da0e64656c65676174655f766f746573da0f626c61636b686f6c655f766f746573da10666f756e646174696f6e5f766f746573da0f646576656c6f7065725f766f746573da0b746f74616c5f766f746573da026d6eda02646cda026268da026664da026476721100000072110000007212000000722700000031000000731800000000010c010c010c010c010c02140108010801080108010801722700000063000000000000000000000000030000004300000073240000007400640119007400640219006b057022740174006403190018007400640419006b05530029054e720e000000721e000000721b000000720d0000002902720f000000722300000072110000007211000000721100000072120000007226000000410000007304000000000114017226000000630200000000000000070000000500000043000000738800000074007c007c01830201007c015c057d027d037d047d057d067401640b050019007c02370003003c007401640c050019007c03370003003c007401640d050019007c04370003003c007401640e050019007c05370003003c007401640f050019007c06370003003c006407740164087c0066023c007401640905001900640a370003003c006400530029104e72140000007206000000720700000072150000007216000000721700000054721f000000720e00000072080000002902721400000072060000002902721400000072070000002902721400000072150000002902721400000072160000002902721400000072170000002902da0f5f5f76616c69646174655f766f7465720f00000029077219000000721a000000da0161da0162da0163da0164da0165721100000072110000007212000000722500000046000000731200000000010a010e01100110011001100110010c01722500000063020000000000000004000000040000004300000073ae0000007c0074006a0174026401190083016b06732c7c0074006a0174026402190083016b06732c740364038301820174047c01830174056b027340740364048301820174067c01830164056b027354740364068301820164077d0278287c0144005d207d0374077c03830164076b05737674036408830182017c027c0337007d02715e57007c0264096b0273927403640a830182017402640b7c006602190064006b0873aa7403640c8301820164005300290d4e720b000000720c0000007a144e6f7420616c6c6f77656420746f20766f7465217a0c506173732061206c69737421e9050000007a154d7573742068617665203520656c656d656e74732172010000007a184e6f206e6f6e2d6e65676174697665206e756d6265727321e9640000007a19456c656d656e7473206d7573742061646420746f2031303021721f0000007a15564b2068617320616c726561647920766f74656421290872210000007222000000720f000000da0e417373657274696f6e4572726f72da0474797065da046c6973747220000000da03696e7429047219000000721a000000da0173da016f721100000072110000007212000000723500000052000000731600000000011201080112011401140104010a0114010c011001723500000029117221000000da0448617368720f000000da07646563696d616cda086461746574696d65da0444415953723f00000072130000007210000000da085f5f6578706f72747218000000da03737472722900000072270000007226000000722500000072350000007211000000721100000072110000007212000000da083c6d6f64756c653e01000000731a00000008010c030e01120104011809080810050601121208100805100c"}},{"key":"rewards.__developer__","value":"sys"},{"key":"rewards.__owner__","value":"election_house"},{"key":"rewards.__submitted__","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"stamp_cost.S:current_total","value":20},{"key":"stamp_cost.S:delegate_contract","value":"delegates"},{"key":"stamp_cost.S:election_max_length","value":{"__delta__":[1,0]}},{"key":"stamp_cost.S:master_contract","value":"masternodes"},{"key":"stamp_cost.S:value","value":20},{"key":"stamp_cost.S:vote_count","value":1},{"key":"stamp_cost.__code__","value":"import election_house\n__S = Hash(contract='stamp_cost', name='S')\n\n\ndef ____(initial_rate: int=100, master_contract='masternodes',\n    delegate_contract='delegates', election_max_length=datetime.DAYS * 1):\n    __S['value'] = initial_rate\n    __S['master_contract'] = master_contract\n    __S['delegate_contract'] = delegate_contract\n    __S['election_max_length'] = election_max_length\n    __S['vote_count'] = 1\n    __reset_current_votes()\n\n\ndef __reset_current_votes():\n    __S['current_total'] = __S['value']\n\n\n@__export('stamp_cost')\ndef current_value():\n    return __S['value']\n\n\n@__export('stamp_cost')\ndef vote(vk: str, obj: int):\n    if __S['election_start'] is None:\n        total_nodes = len(election_house.current_value_for_policy(__S[\n            'master_contract'])) + len(election_house.\n            current_value_for_policy(__S['delegate_contract']))\n        __S['vote_count'] = 1\n        __S['min_votes_required'] = total_nodes * 2 // 3 + 1\n        __S['election_start'] = now\n        __S.clear('has_voted')\n        __reset_current_votes()\n        __tally_vote(vk, obj)\n    else:\n        __tally_vote(vk, obj)\n        if __election_is_over():\n            __update_value()\n            __S['election_start'] = None\n\n\ndef __update_value():\n    __S['value'] = int(__S['current_total'] / __S['vote_count']) or 1\n\n\ndef __election_is_over():\n    return __S['vote_count'] >= __S['min_votes_required'] or now - __S[\n        'election_start'] >= __S['election_max_length']\n\n\ndef __tally_vote(vk: str, obj: int):\n    __validate_vote(vk, obj)\n    __S['current_total'] += obj\n    __S['has_voted', vk] = True\n    __S['vote_count'] += 1\n\n\ndef __validate_vote(vk: str, obj: int):\n    assert vk in election_house.current_value_for_policy(__S['master_contract']\n        ) or vk in election_house.current_value_for_policy(__S[\n        'delegate_contract']), 'Not allowed to vote!'\n    assert type(obj) == int, 'Pass an int!'\n    assert obj > 0, 'No negatives!'\n    assert __S['value'] / 2 <= obj <= __S['value'] * 2, 'Out of range!'\n    assert __S['votes', vk] is None, 'Already voted!'\n"},{"key":"stamp_cost.__compiled__","value":{"__bytes__":"e300000000000000000000000005000000400000007396000000640064016c005a0065016402640364048d025a0264056406640765036a04640814006604650564099c01640a640b84055a06640c640d84005a07650864028301640e640f840083015a09650864028301650a650564109c0264116412840483015a0b6413641484005a0c6415641684005a0d650a650564109c026417641884045a0e650a650564109c026419641a84045a0f64015300291be9000000004eda0a7374616d705f636f7374da01532902da08636f6e7472616374da046e616d65e964000000da0b6d61737465726e6f646573da0964656c656761746573e9010000002901da0c696e697469616c5f7261746563040000000000000004000000030000004300000073320000007c00740064013c007c01740064023c007c02740064033c007c03740064043c006405740064063c007401830001006400530029074eda0576616c7565da0f6d61737465725f636f6e7472616374da1164656c65676174655f636f6e7472616374da13656c656374696f6e5f6d61785f6c656e6774687209000000da0a766f74655f636f756e742902da035f5f53da155f5f72657365745f63757272656e745f766f7465732904720a000000720c000000720d000000720e000000a9007212000000da00da045f5f5f5f05000000730c00000000020801080108010801080172140000006300000000000000000000000003000000430000007310000000740064011900740064023c006400530029034e720b000000da0d63757272656e745f746f74616c29017210000000721200000072120000007212000000721300000072110000000f0000007302000000000172110000006300000000000000000000000002000000430000007308000000740064011900530029024e720b000000290172100000007212000000721200000072120000007213000000da0d63757272656e745f76616c7565130000007302000000000272160000002902da02766bda036f626a630200000000000000030000000500000043000000739200000074006401190064006b087270740174026a0374006402190083018301740174026a037400640319008301830117007d026404740064053c007c026406140064071a0064041700740064083c007404740064013c0074006a0564098301010074068300010074077c007c01830201006e1e74077c007c018302010074088300728e7409830001006400740064013c0064005300290a4eda0e656c656374696f6e5f7374617274720c000000720d0000007209000000720f000000e902000000e903000000da126d696e5f766f7465735f7265717569726564da096861735f766f746564290a7210000000da036c656eda0e656c656374696f6e5f686f757365da1863757272656e745f76616c75655f666f725f706f6c696379da036e6f77da05636c6561727211000000da0c5f5f74616c6c795f766f7465da125f5f656c656374696f6e5f69735f6f766572da0e5f5f7570646174655f76616c7565290372170000007218000000da0b746f74616c5f6e6f646573721200000072120000007213000000da04766f746518000000731c00000000020c0108010e010e010801140108010a0106010c020a01060106017227000000630000000000000000000000000400000043000000732000000074007401640119007401640219001b00830170166403740164043c006400530029054e7215000000720f0000007209000000720b0000002902da03696e747210000000721200000072120000007212000000721300000072250000002b00000073020000000001722500000063000000000000000000000000030000004300000073240000007400640119007400640219006b057022740174006403190018007400640419006b05530029054e720f000000721c0000007219000000720e000000290272100000007221000000721200000072120000007212000000721300000072240000002f0000007304000000000114017224000000630200000000000000020000000400000043000000733a00000074007c007c018302010074016401050019007c01370003003c006402740164037c0066023c0074016404050019006405370003003c006400530029064e721500000054721d000000720f00000072090000002902da0f5f5f76616c69646174655f766f74657210000000290272170000007218000000721200000072120000007213000000722300000034000000730800000000010a0110010c017223000000630200000000000000020000000400000043000000739c0000007c0074006a0174026401190083016b06732c7c0074006a0174026402190083016b06732c740364038301820174047c01830174056b02734074036404830182017c0164056b047350740364068301820174026407190064081b007c01040003006b016f72740264071900640814006b016e0402000100738074036409830182017402640a7c006602190064006b0873987403640b8301820164005300290c4e720c000000720d0000007a144e6f7420616c6c6f77656420746f20766f7465217a0c5061737320616e20696e742172010000007a0d4e6f206e656761746976657321720b000000721a0000007a0d4f7574206f662072616e676521da05766f7465737a0e416c726561647920766f746564212906721f00000072200000007210000000da0e417373657274696f6e4572726f72da0474797065722800000029027217000000721800000072120000007212000000721300000072290000003b000000730e000000000112010801120114011001300172290000002910721f000000da04486173687210000000da086461746574696d65da0444415953722800000072140000007211000000da085f5f6578706f72747216000000da03737472722700000072250000007224000000722300000072290000007212000000721200000072120000007213000000da083c6d6f64756c653e01000000731600000008010c0304011a090804100506011212080408051007"}},{"key":"stamp_cost.__developer__","value":"sys"},{"key":"stamp_cost.__owner__","value":"election_house"},{"key":"stamp_cost.__submitted__","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"submission.__code__","value":"@__export('submission')\ndef submit_contract(name: str, code: str, owner: Any=None, constructor_args: dict={}):\n    if ctx.caller != 'sys':\n        assert not name.isdigit() and all(c.isalnum() or c == '_' for c in name), 'Invalid contract name!'\n\n        assert name.startswith('con_')\n\n    assert ctx.caller == ctx.signer, 'Cannot be called from a smart contract!'\n\n    assert name.islower(), 'Name must be lowercase!'\n\n    __Contract().submit(name=name, code=code, owner=owner, constructor_args=constructor_args, developer=ctx.caller)\n\n\n@__export('submission')\ndef change_developer(contract: str, new_developer: str):\n    d = __Contract()._driver.get_var(contract=contract, variable='__developer__')\n    assert ctx.caller == d, 'Sender is not current developer!'\n\n    __Contract()._driver.set_var(contract=contract,\n                                 variable='__developer__',\n                                 value=new_developer)\n"},{"key":"submission.__compiled__","value":{"__bytes__":"e30000000000000000000000000700000040000000733e000000650064008301640169006602650165016502650364029c0464036404840583015a046500640083016501650164059c0264066407840483015a05640153002908da0a7375626d697373696f6e4e2904da046e616d65da04636f6465da056f776e6572da10636f6e7374727563746f725f61726773630400000000000000040000000700000043000000737c00000074006a0164016b03723c7c006a0283000c00722674036402640384007c00440083018301732e74046404830182017c006a0564058301733c7404820174006a0174006a066b02735074046406830182017c006a07830073607404640783018201740883006a097c007c017c027c0374006a0164088d0501006400530029094eda03737973630100000000000000020000000300000073000000731e0000007c005d167d017c016a00830070147c0164006b02560001007102640153002902da015f4e2901da076973616c6e756d2902da022e30da0163a900720b000000da00fa093c67656e657870723e04000000730200000004007a227375626d69745f636f6e74726163742e3c6c6f63616c733e2e3c67656e657870723e7a16496e76616c696420636f6e7472616374206e616d65215a04636f6e5f7a2743616e6e6f742062652063616c6c65642066726f6d206120736d61727420636f6e7472616374217a174e616d65206d757374206265206c6f776572636173652129057202000000720300000072040000007205000000da09646576656c6f706572290ada03637478da0663616c6c6572da0769736469676974da03616c6cda0e417373657274696f6e4572726f72da0a73746172747377697468da067369676e6572da0769736c6f776572da0a5f5f436f6e7472616374da067375626d697429047202000000720300000072040000007205000000720b000000720b000000720c000000da0f7375626d69745f636f6e747261637401000000730c00000000020a0124020e021402100272190000002902da08636f6e7472616374da0d6e65775f646576656c6f706572630200000000000000030000000500000043000000733c000000740083006a016a027c00640164028d027d0274036a047c026b0273247405640383018201740083006a016a067c0064017c0164048d0301006400530029054eda0d5f5f646576656c6f7065725f5f2902721a000000da087661726961626c657a2053656e646572206973206e6f742063757272656e7420646576656c6f706572212903721a000000721d000000da0576616c756529077217000000da075f647269766572da076765745f766172720f00000072100000007213000000da077365745f7661722903721a000000721b000000da0164720b000000720b000000720c000000da106368616e67655f646576656c6f7065720f000000730a0000000002120112020a01020172230000002906da085f5f6578706f7274da03737472da03416e79da046469637472190000007223000000720b000000720b000000720b000000720c000000da083c6d6f64756c653e01000000730600000006011c0d0601"}},{"key":"submission.__submitted__","value":{"__time__":[2022,8,9,11,56,19,457925]}},{"key":"upgrade.__code__","value":"import election_house\nELECTION_WINDOW = datetime.WEEKS * 1\n__upgrade_state = Hash(contract='upgrade', name='upgrade_state')\n__has_voted = Hash(default_value=False, contract='upgrade', name='has_voted')\n\n\ndef ____():\n    __upgrade_state['locked'] = False\n    __upgrade_state['consensus'] = False\n    __upgrade_state['votes'] = 0\n    __upgrade_state['voters'] = 0\n\n\ndef __start_vote(cilantro_branch_name: str, contracting_branch_name: str,\n    pepper: str):\n    __upgrade_state['locked'] = True\n    __upgrade_state['pepper'] = pepper\n    __upgrade_state['cilantro_branch_name'] = cilantro_branch_name\n    __upgrade_state['contracting_branch_name'] = contracting_branch_name\n    __upgrade_state['votes'] = 0\n    __upgrade_state['voters'] = len(election_house.current_value_for_policy\n        ('masternodes')) + len(election_house.current_value_for_policy(\n        'delegates'))\n    __upgrade_state['started'] = now\n\n\ndef __is_valid_voter(address: str):\n    if address in election_house.current_value_for_policy('masternodes'):\n        return True\n    elif address in election_house.current_value_for_policy('delegates'):\n        return True\n    return False\n\n\n@__export('upgrade')\ndef vote(**kwargs):\n    assert not __has_voted[ctx.caller], 'Cannot vote twice!'\n    assert __is_valid_voter(ctx.caller), 'Invalid voter!'\n    assert not __upgrade_state['consensus'], 'Consensus already achieved!'\n    if __upgrade_state['started'] is not None and now - __upgrade_state[\n        'started'] > ELECTION_WINDOW:\n        __upgrade_state.clear()\n        __has_voted.clear()\n    if not __upgrade_state['locked']:\n        __start_vote(**kwargs)\n        __upgrade_state['votes'] += 1\n        __has_voted[ctx.caller] = True\n    elif __upgrade_state['votes'] + 1 >= __upgrade_state['voters'] * 2 // 3:\n        __upgrade_state['consensus'] = True\n        __has_voted.clear()\n    else:\n        __upgrade_state['votes'] += 1\n        __has_voted[ctx.caller] = True\n"},{"key":"upgrade.__compiled__","value":{"__bytes__":"e300000000000000000000000005000000400000007368000000640064016c005a0065016a02640214005a0365046403640464058d025a05650464066403640764088d035a066409640a84005a07650865086508640b9c03640c640d84045a096508640e9c01640f641084045a0a650b6403830164116412840083015a0c640153002913e9000000004ee901000000da0775706772616465da0d757067726164655f73746174652902da08636f6e7472616374da046e616d6546da096861735f766f7465642903da0d64656661756c745f76616c75657205000000720600000063000000000000000000000000030000004300000073240000006401740064023c006401740064033c006404740064053c006404740064063c006400530029074e46da066c6f636b6564da09636f6e73656e7375737201000000da05766f746573da06766f746572732901da0f5f5f757067726164655f7374617465a900720e000000720e000000da00da045f5f5f5f070000007308000000000108010801080172100000002903da1463696c616e74726f5f6272616e63685f6e616d65da17636f6e7472616374696e675f6272616e63685f6e616d65da0670657070657263030000000000000003000000040000004300000073540000006401740064023c007c02740064033c007c00740064043c007c01740064053c006406740064073c00740174026a03640883018301740174026a0364098301830117007400640a3c0074047400640b3c0064005300290c4e5472090000007213000000721100000072120000007201000000720b000000da0b6d61737465726e6f646573da0964656c656761746573720c000000da07737461727465642905720d000000da036c656eda0e656c656374696f6e5f686f757365da1863757272656e745f76616c75655f666f725f706f6c696379da036e6f772903721100000072120000007213000000720e000000720e000000720f000000da0c5f5f73746172745f766f74650e000000731200000000020801080108010801080106010c010e01721b0000002901da076164647265737363010000000000000001000000030000004300000073280000007c0074006a01640183016b067212640253007c0074006a01640383016b067224640253006404530029054e7214000000547215000000462902721800000072190000002901721c000000720e000000720e000000720f000000da105f5f69735f76616c69645f766f7465721b000000730a00000000010e0104010e010401721d00000063000000000000000001000000040000004b00000073de000000740074016a0219000c0073147403640183018201740474016a028301732674036402830182017405640319000c007338740364048301820174056405190064006b0972647406740564051900180074076b04726474056a088300010074006a08830001007405640619007392740966007c008e01010074056407050019006408370003003c006409740074016a023c006e48740564071900640817007405640a1900640b1400640c1a006b0572c06409740564033c0074006a08830001006e1a74056407050019006408370003003c006409740074016a023c0064005300290d4e7a1243616e6e6f7420766f7465207477696365217a0e496e76616c696420766f74657221720a0000007a1b436f6e73656e73757320616c72656164792061636869657665642172160000007209000000720b000000720200000054720c000000e902000000e903000000290ada0b5f5f6861735f766f746564da03637478da0663616c6c6572da0e417373657274696f6e4572726f72721d000000720d000000721a000000da0f454c454354494f4e5f57494e444f57da05636c656172721b0000002901da066b7761726773720e000000720e000000720f000000da04766f7465230000007320000000000214011201120110010c010801080108010a0110010c011c0108010a0210017227000000290d7218000000da086461746574696d65da055745454b537224000000da0448617368720d00000072200000007210000000da03737472721b000000721d000000da085f5f6578706f72747227000000720e000000720e000000720e000000720f000000da083c6d6f64756c653e01000000731000000008010a010c010e03080704010e0c0e08"}},{"key":"upgrade.__developer__","value":"sys"},{"key":"upgrade.__submitted__","value":{"__time__":[2022,8,9,11,56,0,0]}},{"key":"upgrade.upgrade_state:consensus","value":false},{"key":"upgrade.upgrade_state:locked","value":false},{"key":"upgrade.upgrade_state:voters","value":0},{"key":"upgrade.upgrade_state:votes","value":0}],"origin":{"signature":"0e8cefc4bb01a6a18365718b23bb55ddb8c15c9d71a056f6c1d747c449cd9a19c2016c4b5f41596a5d5f148a9a2e4a3b2174281e6bc13a53f1e42f544d3f4d08","sender":"3808a99eae999cdbac86b0713fd6093171d0296c98686ab66ac4a74abe99e6d8"}}