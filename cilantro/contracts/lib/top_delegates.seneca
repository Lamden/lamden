import seneca.storage.tabular as st
import seneca.storage.kv as kv
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.types as std
from seneca.modulelib import export, make_exports
import num_top_delegates as ntd
import basic_math
import election

@export
def create_election(duration):
    return election.create_election(duration, list)

def filter_delegates(election_id, top_delegates):
    voter_id = rt.sender
    num_top_delegates = ntd.get()
    top_delegates = set(top_delegates)
    assert election.get_election(election_id), \
        'election is not found or no longer opened'
    assert len(top_delegates) <= num_top_delegates, \
        'You can only election for {} TESTNET_DELEGATES'.format(num_top_delegates)
    res = election.get_voter_votes(election_id, voter_id)
    delegates_already_electiond_for = set([r['delegate_id'] for r in res])
    delegates_list_full = top_delegates.union(delegates_already_electiond_for)
    assert len(delegates_list_full) <= num_top_delegates, \
        'You already electiond for {}(max={}) TESTNET_DELEGATES and tried to election for {} more delegate(s).'.format(
            len(delegates_already_electiond_for), num_top_delegates, len(top_delegates)
        )
    return list(top_delegates.difference(delegates_already_electiond_for))

@export
def cast_vote(election_id, top_delegates):
    delegates = filter_delegates(election_id, top_delegates)
    return election.cast_vote(election_id, delegates)

def processor(res):
    num_top_delegates = ntd.get()
    res = [y for x in [r.split(',') for r in res] for y in x]
    elections = [r[0] for r in reversed(sorted(
        [(r, res.count(r)) for r in set(res)],
        key=lambda x:x[1]
    ))]
    return elections[:num_top_delegates]

@export
def tally_votes(election_id):
    return election.tally_votes(election_id, processor)

@export
def get(*args, **kwargs):
    return election.get(*args, **kwargs)

exports = make_exports()

if __name__ == '__main__':
    pass
