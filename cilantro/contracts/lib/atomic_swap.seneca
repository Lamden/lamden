import seneca.storage.tabular as st
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports
import currency

t_agreement = st.create_table('agreement', [
    ('initiator_id', st.str_len(128)),
    ('participant_id', st.str_len(128)),
    ('hash', st.str_len(256), True),
    ('amount', float),
    ('coin_address', st.str_len(256)),
    ('expire_on', std.datetime)
])

@export
def find_address(coin_name):
    # TODO discuss about this logic
    # return rt.clove.find_address(coin_name)
    coin_address = {
        'tau': 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
        'eth': 'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy'
    }.get(coin_name)
    assert coin_address, 'Coin "{}" not found'.format(coin_name)
    return coin_address

@export
def is_tau(coin_address):
    return find_address('tau') == coin_address

@export
def initiate_transfer(participant_id, hash, amount, coin_address, duration=None):
    sender_id = rt.global_run_data.author
    if not duration: duration = std.timedelta(hours=24) # NOTE must clear transaction by this time
    assert type(duration) == std.timedelta, 'Must use type {} for duration'.format(std.timedelta)
    expire_on = std.datetime.now() + duration # NOTE asserts expire < now

    if is_tau(coin_address):
        # NOTE this fails on existing lock and assertion of allowance incorporated in locks
        currency.lock_coins(amount, duration=duration, lock_name='{}$_shared_'.format(hash))

    t_agreement.insert([{ # NOTE this fails on existing agreement
        'initiator_id': sender_id,
        'participant_id': participant_id,
        'hash': hash,
        'amount': amount,
        'coin_address': coin_address,
        'expire_on': expire_on
    }]).run()

    # TODO
    # rt.clove.initiate_swap(sender_id, participant_id, expire_on, hash, coin_address, amount)

@export
def redeem_transfer(secret):
    sender_id = rt.global_run_data.author
    hash = std.ripemd160(secret)
    agreement = t_agreement.select().where(
        t_agreement.hash == hash and \
        t_agreement.participant_id == sender_id
    ).run()
    assert bool(agreement), 'No agreement in place for this secret'
    assert agreement[0]['expire_on'] > std.datetime.now()
    if is_tau(agreement[0]['coin_address']):
        currency.unlock_coins(lock_name='{}$_shared_'.format(hash))
    else:
        duration = agreement[0]['expire_on'] - std.datetime.now()
        currency.lock_coins(
            agreement[0]['amount'],
            duration=duration,
            lock_name='{}$_shared_'.format(hash)
        )

    # TODO
    # rt.clove.redeem_swap(sender_id, hash, secret)

@export
def refund_transfer(hash, participant_id):
    sender_id = rt.global_run_data.author
    agreement = t_agreement.select().where(
        t_agreement.hash == hash and \
        t_agreement.initiator_id == sender_id and \
        t_agreement.participant_id == participant_id
    ).run()
    assert bool(agreement), 'No agreement in place for this secret'
    assert agreement[0]['expire_on'] > std.datetime.now()
    if is_tau(agreement[0]['coin_address']):
        currency.unlock_coins(lock_name='{}$_shared_'.format(hash))
    else:
        duration = agreement[0]['expire_on'] - std.datetime.now()
        currency.lock_coins(
            agreement[0]['amount'],
            duration=duration,
            lock_name='{}$_shared_'.format(hash)
        )

    # TODO
    # rt.clove.refund_transfer(sender_id, participant_id, hash);

exports = make_exports()
