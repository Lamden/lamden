# do not delete the comment below. it is necessary for unit tests.
# UNITTEST_FLAG_CURRENCY_SENECA 1729

import seneca.storage.tabular as st
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports

ledger = st.create_table('ledger', [
    ('wallet_id', st.str_len(200), True),
    ('balance', int),
])

safe = st.create_table('safe', [
    ('wallet_id', st.str_len(200)),
    ('amount', int),
    ('locked_until', std.datetime),
    ('lock_id', st.str_len(200)) # contract name + name of the lock (if specified)
])

allowed = st.create_table('allowed', [
    ('owner_id', st.str_len(200)),
    ('spender_id', st.str_len(200)),
    ('amount', int),
])

LOCKED_DURATION = std.timedelta(days=2)

@export
def get_balance(wallet_id=None):
    if not wallet_id:
        wallet_id = rt.global_run_data.author
    return ledger.select('balance').where(ledger.wallet_id == wallet_id).run()[0]['balance']

@export
def wallet_exists(wallet_id):
    query = ledger.select('wallet_id').where(ledger.wallet_id == wallet_id)
    return len(query.run()) == 1

@export
def create_wallet(wallet_id):
    assert not wallet_exists(wallet_id), "Wallet already exists"
    ledger.insert([{'wallet_id': wallet_id, 'balance': 0}]).run()

def add_coins(wallet_id, amount_to_add):
    assert amount_to_add >= 0, "It's not possible to 'add' a negative balance"

    if not wallet_exists(wallet_id):
        create_wallet(wallet_id)

    old_balance = get_balance(wallet_id)
    ledger.update({'balance': old_balance + amount_to_add}) \
        .where(ledger.wallet_id == wallet_id).run()


def remove_coins(wallet_id, amount_to_remove):
    assert wallet_exists(wallet_id), "Wallet id is not present in ledger"
    assert amount_to_remove >= 0, "Removing negative balances not permitted"

    old_balance = get_balance(wallet_id)
    assert old_balance - amount_to_remove >= 0, "No negative balances allowed"
    ledger.update({'balance': old_balance - amount_to_remove}) \
        .where(ledger.wallet_id == wallet_id).run()

@export
def transfer_coins(receiver_id, amount):
    sender_id = rt.global_run_data.author
    _transfer_coins(sender_id, receiver_id, amount)

def _transfer_coins(sender_id, receiver_id, amount):
    assert wallet_exists(sender_id), "Wallet id is not present in ledger"
    assert wallet_exists(receiver_id), "Wallet id is not present in ledger"
    remove_coins(sender_id, amount)
    add_coins(receiver_id, amount)

################################################################################
#   ERC20 Protocol
################################################################################

@export
def current_approved_amount(owner_id, spender_id):
    approved = allowed.select().where(allowed.owner_id == owner_id and allowed.spender_id == spender_id).run()
    if len(approved) == 1:
        return approved[0]['amount']

@export
def approve(spender_id, amount):
    assert amount > 0, 'Cannot approve negative amount'
    owner_id = rt.global_run_data.author
    approved_amount = current_approved_amount(owner_id, spender_id)
    if approved_amount:
        allowed.update({'amount': amount}).where(
            allowed.owner_id == owner_id and \
            allowed.spender_id == spender_id).run()
    else:
        allowed.insert([
            {'owner_id': owner_id, 'spender_id': spender_id, 'amount': amount}
        ]).run()

@export
def transfer_coins_from(owner_id, amount):
    spender_id = rt.global_run_data.author
    approved_amount = current_approved_amount(owner_id, spender_id)
    assert approved_amount, 'Not approved to transfer'
    assert amount > 0, 'Cannot transfer negative amont'
    assert approved_amount >= amount, 'Attempting to transfer more than approved'
    new_approved_amount = approved_amount - amount
    allowed.update({'amount': new_approved_amount}) \
        .where(allowed.owner_id == owner_id and allowed.spender_id == spender_id).run()
    _transfer_coins(owner_id, spender_id, amount)

@export
def strict_add_to_approval(spender_id, additional_amount):
    assert additional_amount > 0, 'Cannot approve negative amount'
    lock_name = '{}$_approved_'.format(spender_id)
    owner_id = rt.global_run_data.author
    approved_amount = current_approved_amount(owner_id, spender_id)
    if approved_amount != None:
        new_approved_amount = approved_amount + additional_amount
        remove_coins(owner_id, additional_amount)
        _set_lock_amount(owner_id, new_approved_amount, lock_name)
        allowed.update({'amount': new_approved_amount}) \
            .where(allowed.owner_id == owner_id and allowed.spender_id == spender_id).run()
    else:
        lock_coins(additional_amount, lock_name=lock_name)
        allowed.insert([{
            'owner_id': owner_id, 'spender_id': spender_id, 'amount': additional_amount
        }]).run()

@export
def strict_transfer_coins_from(owner_id, amount):
    spender_id = rt.global_run_data.author
    lock_name = '{}$_approved_'.format(spender_id)
    approved_amount = current_approved_amount(owner_id, spender_id)
    assert approved_amount, 'Not approved to transfer'
    assert amount > 0, 'Cannot transfer negative amont'
    assert approved_amount >= amount, 'Attempting to transfer more than approved'
    new_approved_amount = approved_amount - amount
    _set_lock_amount(owner_id, new_approved_amount, lock_name)
    allowed.update({'amount': new_approved_amount}) \
        .where(allowed.owner_id == owner_id and allowed.spender_id == spender_id).run()
    add_coins(spender_id, amount)

################################################################################
#   Locks
################################################################################

@export
def is_locked(wallet_id, amount=None, lock_name='default'):
    if not wallet_id:
        wallet_id = rt.global_run_data.author
    lock_id = '$'.join([rt.caller_contract_id, lock_name])
    if lock_id.endswith('$_shared_'):
        return safe.select().where(
            safe.wallet_id != wallet_id and \
            safe.lock_id == lock_id and \
            safe.locked_until > std.datetime.now()
        ).run()
    elif amount != None:
        return safe.select().where(
            safe.wallet_id == wallet_id and \
            safe.lock_id == lock_id and \
            safe.locked_until<=std.datetime.now()
        ).run()
    else:
        return safe.select().where(
            safe.wallet_id == wallet_id and \
            safe.lock_id == lock_id and \
            safe.amount == amount and \
            safe.locked_until<=std.datetime.now()
        ).run()

@export
def lock_coins(amount, duration=None, lock_name='default'):
    if not duration:
        duration = std.timedelta(seconds=0)
    wallet_id = rt.global_run_data.author
    contract_id = rt.caller_contract_id
    lock_id = '$'.join([contract_id, lock_name])
    assert amount > 0, 'Cannot lock negative amounts'
    assert not is_locked(wallet_id, lock_name=lock_name), \
        'Wallet {} already locked for "{}"'.format(wallet_id, contract_id)
    assert type(duration) == std.timedelta, 'Must use {} for duration'.format(std.timedelta)
    remove_coins(wallet_id, amount)
    safe.insert([{
        'wallet_id': wallet_id,
        'amount': amount,
        'lock_id': lock_id,
        'locked_until': std.datetime.now()+duration
    }]).run()

def _set_lock_amount(wallet_id, new_amount, lock_name='default'):
    lock_id = '$'.join([rt.caller_contract_id, lock_name])
    safe.update({
        'amount': new_amount,
        'locked_until': std.datetime.now() + LOCKED_DURATION
    }).where(safe.lock_id == lock_id).run()

@export
def unlock_coins(lock_name='default'):
    wallet_id = rt.global_run_data.author
    contract_id = rt.caller_contract_id
    _unlock_coins(wallet_id, lock_name)

def _unlock_coins(wallet_id, lock_name):
    lock_id = '$'.join([rt.caller_contract_id, lock_name])
    locked_obj = is_locked(wallet_id, lock_name=lock_name)
    if lock_name.endswith('$_shared_'):
        res = safe.delete().where(
            safe.wallet_id != wallet_id and \
            safe.lock_id == lock_id).run()
    else:
        assert locked_obj, 'No coins in the lock "{}"'.format(lock_id)
        assert not lock_name.endswith('$_approved_'), \
            'Approved transfers cannot be unlocked until after expiry'
        res = safe.delete().where(
            safe.wallet_id == wallet_id and \
            safe.lock_id == lock_id and \
            safe.locked_until<=std.datetime.now()).run()
    assert res['row_count'] != 0, 'Cannot unlock coin (yet)'
    amount = locked_obj[0]['amount']
    add_coins(wallet_id, amount)


exports = make_exports()

if __name__ == '__main__':
    # print("\n\n STARTING CURRENCY CONTRACT MAIN FUNC \n\n")

    GENESIS_WALLETS = [
        {
            "wallet": "CARL",
            "amount": 3696947
        },
        {
            "wallet": "DAVIS",
            "amount": 3696947
        },
        {
            "wallet": "RAGHU",
            "amount": 3696947
        },
        {
            "wallet": "STU",
            "amount": 3696947
        },
        {
            "wallet": "FALCON",
            "amount": 0 # :(
        },
        {
            "wallet": "0c998fa1b2675d76372897a7d9b18d4c1fbe285dc0cc795a50e4aad613709baf",
            "amount": 3696947
        },
        {
            "wallet": "82540bb5a9c84162214c5540d6e43be49bbfe19cf49685660cab608998a65144",
            "amount": 3696947
        },
        {
            "wallet": "0e669c219a29f54c8ba4293a5a3df4371f5694b761a0a50a26bf5b50d5a76974",
            "amount": 3696947
        },
        {
            "wallet": "50869c7ee2536d65c0e4ef058b50682cac4ba8a5aff36718beac517805e9c2c0",
            "amount": 3696947
        },
        {
            "wallet": "3dd5291906dca320ab4032683d97f5aa285b6491e59bba25c958fc4b0de2efc8",
            "amount": 3696947
        },
        {
            "wallet": "ab59a17868980051cc846804e49c154829511380c119926549595bf4b48e2f85",
            "amount": 3696947
        }
    ]

    STU = ('db929395f15937f023b4682995634b9dc19b1a2b32799f1f67d6f080b742cdb1',
     '324ee2e3544a8853a3c5a0ef0946b929aa488cbe7e7ee31a0fef9585ce398502')
    DAVIS = ('21fee38471799f8c2989dd81c6d46f6c2e2db6caf63efa98a093fcba064a4b62',
     'a103715914a7aae8dd8fddba945ab63a169dfe6e37f79b4a58bcf85bfd681694')
    DENTON = ('9decc7f7f0b5a4fc87ab5ce700e2d6c5d51b7565923d50ea13cbf78031bb3acf',
     '20da05fdba92449732b3871cc542a058075446fedb41430ee882e99f9091cc4d')
    FALCON = ('bac886e7c6e4a9fae572e170adb333b27b590157409e62d88cc0c7bc9a7b3631',
     'ed19061921c593a9d16875ca660b57aa5e45c811c8cf7af0cfcbd23faa52cbcd')
    CARL = ('cf67a180f9578afa5fd704cea39b450c1542755d73614f6a4f41b627190b83bb',
     'cb9bfd4b57b243248796e9eb90bc4f0053d78f06ce68573e0fdca422f54bb0d2')
    RAGHU = ('b44a8cc3dcadbdb3352ea046ec85cd0f6e8e3f584e3d6eb3bd10e142d84a9668',
     'c1f845ad8967b93092d59e4ef56aef3eba49c33079119b9c856a5354e9ccdf84')

    ALL_WALLETS = [STU, DAVIS, DENTON, FALCON, CARL, RAGHU]
    [GENESIS_WALLETS.append({'wallet': w[1], 'amount': 3696947}) for w in ALL_WALLETS]

    # Seed genesis wallets
    list(map(lambda x: add_coins(x['wallet'], x['amount']), GENESIS_WALLETS))
