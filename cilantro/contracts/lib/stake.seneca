#!/usr/bin/env seneca_0.1
## Example currency smart contract ##
# UNITTEST_FLAG_CURRENCY_SENECA 1729


import seneca.storage.tabular as st
import seneca.storage.kv as kv
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports
import election
import basic_math

STATUS = election.enum()

t_stake_election = st.create_table('stake_election', [
    ('election_id', st.str_len(30)),
    ('voter_id', st.str_len(30)),
    ('amount', int)
])

# This table is just for normalizing the structure
t_policies = st.create_table('policies', [
    ('election_id', st.str_len(30)),
    ('policy', st.str_len(30))
])

kv_policy = kv.create_kv('constants')

#############################################
# Voting
#############################################

@export
def start_election(policy):
    policy_maker_id = rt.global_run_data.author
    assert policy in ['witness_stake', 'delegate_stake', 'masternode_stake']
    election_id = election.create_election(policy_maker_id, policy)
    t_policies.insert([{
        'election_id': election_id, 'policy': policy
    }]).run()
    return election_id

@export
def cast_vote(election_id, amount):
    voter_id = rt.global_run_data.author
    assert election.get_election(election_id), 'election is not found or no longer opened'
    t_stake_election.insert([
        {'election_id': election_id, 'voter_id': voter_id, 'amount': amount}
    ]).run()

@export
def tally_votes(election_id):
    policy_maker_id = rt.global_run_data.author
    res = t_stake_election.select().where(
        t_stake_election.election_id == election_id
    ).run()
    policy = t_policies.select().where(
        t_policies.election_id == election_id
    ).run()[0]['policy']
    elections = [r['amount'] for r in res]
    stake_amount = basic_math.mode(elections)
    kv_policy.set([(policy, stake_amount)]).run()
    election.close_election(policy_maker_id, policy, STATUS.PASSED)
    return stake_amount

@export
def get(attr):
    return kv_policy.get(attr).run()

exports = make_exports()
