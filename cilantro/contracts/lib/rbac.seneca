from seneca.storage.tabular import create_table, get_table, str_len, add_column, drop_column, drop_table
import seneca.runtime as rt
from seneca.modulelib import export, make_exports

# TODO: Implement per-table permissions
# if __name__ == '__main__':
#     # Clean-up for testing
#     try:
#         drop_table('users')
#         drop_table('roles')
#     except Exception as e:
#         print(e)
#         # TODO: Don't do this.
#         pass


# Table definitions
users = create_table('users', [
    ('user', str_len(50), True),
    ('role', str_len(30)),
])
roles = create_table('roles', [
    ('role', str_len(30), True),
    ('perm_create_table', bool),
    ('perm_drop_table', bool),
    ('perm_edit_users', bool),
    ('perm_edit_roles', bool),
    ('perm_edit_data', bool),
])


def _insert_role(name, create_table, drop_table, edit_users, edit_roles, edit_data):
    q = roles.insert([{
        'role': name,
        'perm_create_table': create_table,
        'perm_drop_table': drop_table,
        'perm_edit_users': edit_users,
        'perm_edit_roles': edit_roles,
        'perm_edit_data': edit_data,
    }])
    q.run()


def _insert_user(user_pub_key, role_name):
#def _insert_user(*args):
    # Verify role exists
    q = roles.select().where(roles.role == role_name)
    assert len(q.run()) != 0, "ERROR: role not found"

    users.insert([{
        'user': user_pub_key,
        'role': role_name,
    }]).run()


def assert_has_perm(perm_name):
    # Find role for current user
    r_name = users.select().where(users.user == rt.sender).run()[0]['role']
    # Find and return boolean value for the specified permission in that role
    is_allowed = roles.select().where(roles.role == r_name).run()[0][perm_name]
    assert is_allowed, "ERROR: The current user does not have the necessary permission."


def assert_not_protected_table(t_name):
    assert t_name not in ['roles', 'users'], 'ERROR: You have attempted to access a protected table. \
      there are dedicated functions to do that. Access denied.'


# Note: read functions are solely for convenience/completeness, tables are world readable
@export
def create_role(*args):
    assert_has_perm('perm_edit_roles')
    return _insert_role(*args)


@export
def delete_role(r):
    assert_has_perm('perm_edit_roles')
    return roles.delete.where(roles.role == r).run()


@export
def update_role(name, create_table, drop_table, edit_users, edit_roles, edit_data):
    assert_has_perm('perm_edit_roles')
    return roles.update([{
        'perm_create_table': create_table,
        'perm_drop_table': drop_table,
        'perm_edit_users': edit_users,
        'perm_edit_roles': edit_roles,
        'perm_edit_data': edit_data,
    }]).where(roles.role == name).run()


@export
def read_role(r):
    return roles.select.where(roles.role == r).run()[0]


@export
def create_user(*args):
    assert_has_perm('perm_edit_users')
    return _insert_user(*args)


@export
def delete_user(u_name):
    assert_has_perm('perm_edit_users')
    return users.delete.where(users.user == u_name).run()


@export
def update_user(u, r):
    assert_has_perm('edit_users')
    return users.update({'role': r}).where(users.user == u).run()


@export
def read_user(u):
    return users.select.where(users.user == u).run()[0]


@export
def create_table(t_name, t_def):
    assert_has_perm('perm_create_table')
    assert_not_protected_table(t_name)

    return create_table(t_name, t_def)


@export
def delete_table(t_name):
    assert_has_perm('perm_drop_table')
    assert_not_protected_table(t_name)
    return drop_table(t_name)


@export
def create_row(t_name, row_data):
    assert_has_perm('edit_data')
    assert_not_protected_table(t_name)
    t = get_table(t_name)
    t.insert(row_data).run()


@export
def update_row(t_name, row_data):
    assert_has_perm('edit_data')
    assert_not_protected_table(t_name)
    assert 'id' in row_data, "An id must be included for updates"

    t = get_table(t_name)
    return t.update(row_data).where(t.id == row_data['id']).run()


@export
def read_row(t_name, r_id):
    t = get_table(t_name)
    return t.select.where(t.id == r_id).run()[0]


if __name__ == '__main__':
#    map(drop_table, ['users', 'roles'])

    # Create first user, the author of this contract, and give that user admin perms
    _insert_role('admin', True, True, True, True, True)
    _insert_user(rt.this_contract.author, 'admin')

else:
    exports = make_exports()
