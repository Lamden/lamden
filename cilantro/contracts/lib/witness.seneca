#!/usr/bin/env seneca_0.1
## Example currency smart contract ##
# UNITTEST_FLAG_CURRENCY_SENECA 1729

import seneca.storage.tabular as st
import seneca.storage.kv as kv
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports
import currency
import stake as sc_stake

t_witnesses = st.create_table('witness', [
    ('witness_id', st.str_len(30), True)
])

kv_policy = kv.create_kv('constants')

@export
def stake():
    sender_id = rt.global_run_data.author
    print("[inside of witness] rt.global_run_data.address={}".format(rt.global_run_data.address))
    stake_amount = sc_stake.get('witness_stake')
    currency.lock_coins(stake_amount)
    t_witnesses.insert([
        {'witness_id': sender_id}
    ])

@export
def unstake():
    sender_id = rt.global_run_data.author
    currency.unlock_coins()

@export
def is_witness():
    sender_id = rt.global_run_data.author
    return bool(t_witnesses.select().where(t_witnesses.witness_id == sender_id).run())

@export
def get_vks(attr):
    return t_witnesses.select().run()

exports = make_exports()
