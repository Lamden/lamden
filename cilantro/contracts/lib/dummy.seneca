# do not delete the comment below. it is necessary for unit tests.
# UNITTEST_FLAG_CURRENCY_SENECA 1729

import seneca.storage.tabular as st
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports

dummy = st.create_table('dummy', [
    ('wallet_id', st.str_len(200), True),
    ('balance', int),
])

def add_user(wallet_id, amount=0):
    if not wallet_id:
        wallet_id = rt.global_run_data.author
    dummy.insert([{'wallet_id': wallet_id, 'balance': amount}]).run()

@export
def bad_code(fail=False):
    if fail:
        free_money(rt.global_run_data.author, 123)
        add_user()
    else:
        free_money(rt.global_run_data.author, 500)

@export
def free_money(wallet_id, amount):
    balance = get_balance(wallet_id)
    dummy.update({'balance': balance + amount}) \
        .where(dummy.wallet_id == wallet_id).run()

@export
def get_balance(wallet_id=None):
    if not wallet_id:
        wallet_id = rt.global_run_data.author
    return dummy.select('balance').where(dummy.wallet_id == wallet_id).run()[0]['balance']

exports = make_exports()

if __name__ == '__main__':
    ALICE_VK = "0c998fa1b2675d76372897a7d9b18d4c1fbe285dc0cc795a50e4aad613709baf"
    add_user(ALICE_VK)
